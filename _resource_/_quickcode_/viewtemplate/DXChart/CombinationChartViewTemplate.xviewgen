<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="2.0">
  <ViewTemplate id="CombinationChartViewTemplate" viewtype="DXChart" description="Mixed data visualization (Bar and Line Chart)"/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/**
*  [DXChart] CombinationChart View Template
*  @FileName 	CombinationChartViewTemplate.xviewgen 
*  @Creator 	Lauren
*  @CreateDate 	2022.07.07
*  @Desction    Mixed data visualization (Bar and Line Chart)
*  					- 각 시리즈 데이터를 막대, 선, 영역으로 표현하는 차트를 그려주는 템플릿
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2022.03.28     		Creator       	      		최초 생성
*******************************************************************************
*/
/************************************************************************************************
 * include 선언부
 ************************************************************************************************/
include "quickcode::viewtemplate/lib/dxlib.xjs";
include "quickcode::viewtemplate/lib/dxchart.xjs";
/************************************************************************************************
 * 변수 선언 영역
 ************************************************************************************************/
// TODO : Sketch에서 상수&변수 초기화가 되지 않아 임시로 작업
fn_InitVariable = function()
{
	// 공통변수 초기화
	this.lfn_InitCommonVariable();
	
	//--------------------------------------------------------------------------------------------------------
	// ViewTemplate 상수
	//--------------------------------------------------------------------------------------------------------
	// View 여백
	this.VIEW_PADDING = "20";		// 타이틀 기능 넣을떄 : "0 20 20"

	this.SERIES_LINE_STYLE = "2px solid";				// 시리즈 선 스타일
	//--------------------------------------------------------------------------------------------------------
	
	//--------------------------------------------------------------------------------------------------------
	// [DXChart] 변수
	//--------------------------------------------------------------------------------------------------------
	// 필드 정보
	this.oChartFieldInfo = {
		  "category"	: null
		, "series"		: []
		, "seriesbar"	: []
		, "seriesline"	: []
		, "axisy"		: []
		, "axisy1"		: []
	};
	//--------------------------------------------------------------------------------------------------------
};

// 초기값 선언용
fn_InitVariable();
/************************************************************************************************
 * Nexacro Studio 호출 필수 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   : 
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr)
{
	//리턴 값
    var vResult = "";
	
	// Preview용 데이터 생성여부
	var bPreviewMode = false;
	
	vResult = fn_GetViewGeneration(fieldarray, contents, generationattr, bPreviewMode);
	
	 //뷰 컴포넌트 정보 리턴
    return vResult;
};

// Preview용 Generation 함수(Chart는 Dataset에 Data가 없는 경우 Preview가 표시되지 않아 기능추가)
fn_GetViewGenerationPreview = function(fieldarray, contents, generationattr)
{
	//리턴 값
    var vResult = "";
	
	// Preview용 데이터 생성여부
	var bPreviewMode = true;
	
	vResult = fn_GetViewGeneration(fieldarray, contents, generationattr, bPreviewMode);
	
	 //뷰 컴포넌트 정보 리턴
    return vResult;
};

// ViewGeneration 결과 반환 함수
fn_GetViewGeneration = function(fieldarray, contents, generationattr, bPreviewMode)
{
	//리턴 값
    var vResult = "";

    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);
	
	/*********/
	//{{ nexacro sketch - 숫자형 데이터의 마지막을 선차트로 표현하는 combinationchart view template
	if(fieldarray)
	{
		var oTempField;
		var bSettedCategory = false;
		var nSeriesCount = 0;
		var oLastSeriesField;
		
		var oTempFieldArray = JSON.parse(fieldarray);
		var oTempGenAttrArray = JSON.parse(generationattr);
		var oTempContents = JSON.parse(contents);
		
		// 변수 초기화(TODO : Sketch에서 상수&변수 초기화가 되지 않아 임시로 작업)
		fn_InitVariable();
		
		var nTempWidth = oTempContents.View.referenceinfo.realwidth;
		//var nTempHeight = oTempContents.View.referenceinfo.realheight;
		
		// Sketch용 옵션
		var sTitleText = oTempGenAttrArray.attributes.titletext;
		var sChartThemeType = oTempGenAttrArray.attributes.chartthemetype;
		var sLegendPosition = oTempGenAttrArray.attributes.legendposition;
		var sLineType = oTempGenAttrArray.attributes.linetype;
		var sCategoryAxisTitleText = oTempGenAttrArray.attributes.categoryaxistitletext;
		var sValueAxisTitleText = oTempGenAttrArray.attributes.valueaxistitletext;
		
		// Sketch용 공통 Sketch Attribute 초기화
		this.lfn_InitAttribute(oTempFieldArray, oTempGenAttrArray);
		
		if (oTempFieldArray)
		{
			var arrTempFields = oTempFieldArray.fields;
			for(var i=0; i<arrTempFields.length; i++)
			{
				oTempField = arrTempFields[i];
				
				if (oTempField.id == "TREELEVEL")
				{
					oTempField.displaytype = "none";
				}
				else if (oTempField.datatype == "STRING" && bSettedCategory == false)
				{
					oTempField.displaytype = "category";
					bSettedCategory = true;
				}
				else if (oTempField.datatype == "INT" || oTempField.datatype == "FLOAT" || oTempField.datatype == "BIGDECIMAL")
				{
					oTempField.displaytype = "series";
					nSeriesCount++;
					
					oLastSeriesField = oTempField;
				}				
 				else
 				{
 					oTempField.displaytype = "none";
 				}
			}
			
			if (bSettedCategory == false)
			{
				this.lfn_Log("It must select at least one field of 'Text' type.","error",true);
				return;
			}
			if (nSeriesCount <= 0)
			{
				this.lfn_Log("It must select at least one field of 'INT' type.","error",true);
				return;
			}
			
			// 마지막 시리즈를 선차트로 고정
			if (nSeriesCount > 1 && this.lfn_IsNotNull(oLastSeriesField))
			{
				oLastSeriesField["seriesdisplay"] = "line";
				//oLastSeriesField["valueaxes"] = "y1";
			}
			
			fieldarray = JSON.stringify(oTempFieldArray, null, "\t");
			//trace(">> fieldarray : " + fieldarray);
		}
		
		if (generationattr)
		{
			//field id 설정시
			if (oTempFieldArray && oTempGenAttrArray)
			{
 				oTempGenAttrArray.attributes.viewpadding = this.VIEW_PADDING;
				
				oTempGenAttrArray.attributes.titletext = sTitleText;
				oTempGenAttrArray.attributes.chartthemetype = sChartThemeType;
				oTempGenAttrArray.attributes.legendposition = sLegendPosition;
				oTempGenAttrArray.attributes.linetype = sLineType;
				oTempGenAttrArray.attributes.categoryaxistitletext = sCategoryAxisTitleText;
				oTempGenAttrArray.attributes.valueaxistitletext = sValueAxisTitleText;
				
				generationattr = JSON.stringify(oTempGenAttrArray, null, "\t");
				//trace(">> generationattr : " + generationattr);
			}
		}
	}
	
	//{{ nexacro sketch - 숫자형 데이터의 마지막을 선차트로 표현하는 combinationchart view template
	/*********/

     //Set Generation Info
	//this.oFieldArray : Model Information as JSON Object
	//this.oContents : View Component Information as JSON Object
	//this.oContents.View.Model : Model Information Initialization
	//this.oGenerationAttr : Setting Information as JSON Object
	this.lfn_MakeGenerationInfo(fieldarray, contents, generationattr, false);

	// View Padding 설정
	this.lfn_SetViewPadding();

	//모델정보 생성 함수 호출
	fn_GetModel(bPreviewMode);

	//InitValue 정보 생성 함수 호출
    this.oContents.View.InitValue = fn_GetInitValue();

	//Object 정보 생성 함수 호출
    this.oContents.View.Objects = fn_GetObjects(bPreviewMode);

	//Script 정보 생성 함수 호출
    this.oContents.View.Script = fn_GetScript();

	//뷰 컴포넌트 정보를 String으로 변환
    vResult = JSON.stringify(this.oContents, null, "\t");

    //trace(">> vResult : " + vResult);
	
    //뷰 컴포넌트 정보 리턴
    return vResult;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function() {

    var sViewAttr = "";
    var oViewAttr = {
                        "attributes": [
							  this.oAttrTitleText					// Title Text
							, this.oAttrChartThemeType				// 차트테마
							, this.oAttrLegendPosition				// 범례 표시 위치
							, {
                                "id": "linetype",
								"displaytext": "Line Type",
                                "edittype": "Enum",
                                "defaultvalue": "segment",
                                "enumlist" : ["segment", "step", "curve"],
                                "description": "Set the type of line"
												+ "\n" + " - segment : Line chart"
												+ "\n" + " - step : Step chart"
												+ "\n" + " - curve : Curve chart"
                            }
							, this.oAttrCategoryAxisTitleText		// 데이터명축(x축) 타이틀 Text
							, this.oAttrValueAxisTitleText			// 데이터축(y축) 타이틀 Text
                        ]
                  };
				  
	oViewAttr["attributecount"] = oViewAttr["attributes"].length;

	sViewAttr = JSON.stringify(oViewAttr, null, "\t");
    return sViewAttr;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
	var sFieldAttr = "";

	var oFieldAttr = {
                        "attributes": [
                            {
                                "id"			: "displaytype",
                                "edittype"		: "Enum",
								"enumlist" 		: ["none", "category", "series"],
                                "defaultvalue"	: "series",
                                "description"	: "데이터 표현방식"
												+ "\n" + " - none : 사용안함"
												+ "\n" + " - category : 데이터명 Field(1개)"
												+ "\n" + " - series : 데이터값 Field(n개)"
                            }
							, {
                                "id"			: "seriesdisplay",
                                "edittype" 		: "Enum",
								"enumlist" 		: ["column","line"],
								"defaultvalue"	: "column",
                                "description"	: "시리즈를 표시할 차트유형 설정"
												+ "\n" + " - column : 막대 그래프"
												+ "\n" + " - line : 선 그래프"
                            }
// 							, {
//                                 "id"			: "valueaxes",
//                                 "edittype" 		: "Enum",
// 								"enumlist" 		: ["y", "y1", "y2"],
// 								"defaultvalue"	: "y",
//                                 "description"	: "데이터축을 설정. y는 왼쪽, y1,y2는 오른쪽에 표시됨."
//                             }
                        ]
                  };
				  
	oFieldAttr["attributecount"] = oFieldAttr["attributes"].length;

 	sFieldAttr = JSON.stringify(oFieldAttr, null, "\t");

    return sFieldAttr;
}
/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : model contents (JSON format)
 * Description  : Function to generate a component source based on field information of the model entered by the user
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function(bPreviewMode)
{
	// Chart Attribute
	var oChartAttr = {};

	// Title 영역
	var sTitleText			= this.oGenerationAttr.attributes.titletext;			// 타이틀 Text
	this.VIEW_PADDING_TOP	= this.lfn_MakeTitleArea(sTitleText, "false", "none");
	
	// 차트 기본속성 셋팅
	oChartAttr = this.lfn_CloneObject(this.oBaseChartAttr);
	
	// View 여백 설정
	oChartAttr["left"] = this.VIEW_PADDING_LEFT;
	oChartAttr["top"] = this.VIEW_PADDING_TOP;
	oChartAttr["right"] = this.VIEW_PADDING_RIGHT;
	oChartAttr["bottom"] = this.VIEW_PADDING_BOTTOM;
	
	//모델 필드 갯수 가져오기
    var nFieldCount = this.oFieldArray.fieldcount;
	
	var arrField = new Array(); 
	
	// 카테고리 필드
	this.oChartFieldInfo.category = null;
	
	// 시리즈 필드
	this.oChartFieldInfo.series = new Array();
	
	this.oChartFieldInfo.seriesbar = new Array();				// [CombinationChart] bar인 series 임시 배열
	this.oChartFieldInfo.seriesline = new Array();				// [CombinationChart] bar가 아닌 series 임시 배열
	this.oChartFieldInfo.axisy = new Array();
	this.oChartFieldInfo.axisy1 = new Array();

	var sDisplaytype, sValueaxes;
	
	//차트에서 사용할 모델 Field ID 리스트 만들기
    for(i=0;i<nFieldCount;i++)
    {
        oField = this.oFieldArray.fields[i];
		sDisplaytype = oField.displaytype;
		sValueaxes = oField.valueaxes;
		
		// this.oFieldArray Json Data로 Field Array() 셋팅
		arrField.push(oField.id);
		
		// displaytype에 따라 Array() 셋팅
		if (sDisplaytype == "category") {
			if(this.lfn_IsNull(this.oChartFieldInfo.category)) {
				this.oChartFieldInfo.category = oField;
			} else {
				this.lfn_Log("Only one 'category' can be specified.","warn");
			}
		} else if (sDisplaytype == "series") {
			
			// [CombinationChart] seriesdisplay 값이 bar것과 아닌거 구분하여 추가
			if (oField.seriesdisplay == "column") {
				this.oChartFieldInfo.seriesbar.push(oField);
			} else {
				this.oChartFieldInfo.seriesline.push(oField);
			}
			
			// valueaxes에 따라 Y축 Array() 셋팅
			if (sValueaxes == "y1") {
				this.oChartFieldInfo.axisy1.push(oField);
			} else {
				this.oChartFieldInfo.axisy.push(oField);
			}
		}
    }
	
	// [CombinationChart] bar형식을 arrSeriesField 앞쪽에 추가(∵ 중간에 시리즈가 추가되면 막대차트 사이에 공간이 생김.)
	this.oChartFieldInfo.series = this.oChartFieldInfo.seriesbar.concat(this.oChartFieldInfo.seriesline);
	
	// 카테고리 설정
	if(this.lfn_IsNull(this.oChartFieldInfo.category)) {
		this.lfn_Log("'category' is not specified.","warn");
		
		// Preview모드일때 category 예외처리
		if (bPreviewMode == true)
		{
			this.oChartFieldInfo.category = this.lfn_Nvl(this.oFieldArray.fields.find(oField => oField.datatype == "STRING"),this.oFieldArray.fields[0]);
		}
	}
	
	//차트 컴포넌트 추가
	var oModel = this.oContents.View.Model;
    oModel[oModel.length] = {
            "fieldid" : arrField.join(","),
            "Components" :
            [
                {
                    "tag" : "ChartJS",
                    "attribute" : oChartAttr,
                }
            ]
        }

	//생성할 Model 정보 리턴
    return oModel;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function()
{
    var oInitValue = [];
	
    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function(bPreviewMode)
{
	//오브젝트 정보 초기화
    var oObjects = [];
	
	var nRowCnt = 0;
	var arrRows;
	
	// Preview일때 임시데이터 생성
	if (bPreviewMode)
	{
		nRowCnt = 5;
		arrRows = this.lfn_GetPreviewData(this.oFieldArray,nRowCnt);
	}
	
	// viewdataset 생성
	var oViewDataset = this.lfn_GetDataset("viewdataset", this.oFieldArray, nRowCnt, arrRows);

	//Object Information Setting
	oObjects.push(oViewDataset);
	
    return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function(){

	//스크립트 정보 초기화
    var oScript = {};

	//스크립트 정보 리턴
    return oScript;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function()
{
	//Initialize Script Information
    var oScript = {};
	var arrChart = [];
    var sScript = "";
	var sSetDXChart = "";
	
	var sViewNm				= this.oContents.View.attribute.id;
	var sTitleText			= this.oGenerationAttr.attributes.titletext;			// 타이틀 Text
	var sUseExpandButton	= this.oGenerationAttr.attributes.useexpandbutton;		// expand 토글버튼 사용여부 및 초기값
	var sUseTotalCount		= this.oGenerationAttr.attributes.usetotalcount;		// 전체건수 표시여부
	
	// 컴포넌트 공통 ViewScript 반환
	//sScript = this.lfn_GetCompCommonScript(sViewNm);
	
	// 타이틀 Expand버튼 동작 스크립트
	if (this.lfn_IsNotNull(sTitleText))
	{
		sScript += this.lfn_GetTitleScript(sViewNm, sUseExpandButton, sUseTotalCount);
	}
	
	// DXChart 스크립트 가져오기
	arrChart = fn_GetDxChart();
	sSetDXChart = this.lfn_GetDxChartScript(arrChart);
	
	// DXChartScript 공통스크립트 가져오기
	sScript += this.lfn_GetCommonDXChartScript(sViewNm, sSetDXChart);

	if (this.lfn_IsNotNull(sScript))
	{
		sScript = nexacro.replaceAll(sScript,"\t","");
		
		oScript =
		{
			"tag": "Script",
			"attribute": { "type" : "xscript5.1" },
			"value": sScript
		}
	};
	
	//Return Script Information
    return oScript;
};

// DXChart 정보 
fn_GetDxChart = function()
{
	var arrChart = [];
	
	// 시리즈 셋팅
	arrChart = fn_GetSeries(this.oChartFieldInfo);
	
	return arrChart;
	
};

// 시리즈 셋팅
fn_GetSeries = function(oChartFieldInfo)
{
	var sChartThemeType = this.oGenerationAttr.attributes.chartthemetype;
	var sLineType = this.oGenerationAttr.attributes.linetype;
	var sLegendPosition = this.oGenerationAttr.attributes.legendposition;
	
	var arrChart = [];
	var oChart = {};
	var oProp = {};
	var oOption = {};
	
	var oCategoryField = oChartFieldInfo.category;
	var arrSeriesField = oChartFieldInfo.series;
	
	var oField;
	
	var arrThemeColor = this.lfn_GetChartThemeColor(sChartThemeType);
	
	var arrData  = [];
	var arrLabel = [];
	var arrLegend = []; 
	var arrColor = [];
	var sChartClassId, sAniType;
	var oProField;
	var sProChartType = "";
	var oMargin = {};
	
	// Margin값 중 젤 큰값을 모든 차트에 설정
	var nMaxLeft = 0;
	var nMaxTop = 0;
	var nMaxRight = 0;
	var nMaxBottom = 0;
	var nDiffRight = 0;
	var nDiffBottom = 0;
	
	// 데이터
	var nCount = arrSeriesField.length;
	for(var i=0;i<nCount;i++)
	{
		oField = arrSeriesField[i];
		oProField = arrSeriesField[i+1];
		
		sChartType = oField.seriesdisplay;
		sProChartType = oProField == null ? "" : oProField["seriesdisplay"];
		
		// 범례용 라벨정보 설정
		arrLegend.push(oField.label);
		
		// 시리즈 정보 추가
		if (sChartType != sProChartType)
		{
			oChart = {};
			oProp = {};
			oOption = {};
			
			// 내 정보 추가
			arrData.push("bind:" + oField.id);
			arrLabel.push(oField.label);
			arrColor.push(this.lfn_GetChartColor(i,arrThemeColor));
			
			// DXChart 유형
			sChartClassId = this.lfn_GetChartClassId(sChartType);
			
			// 애니메이션 설정 (draw, grow,wave)
			sAniType = this.lfn_GetSeriesAni(sChartClassId, true);
			
			if (sChartType == "line") {
				// 차트별 옵션 기본값 설정
				oOption = this.lfn_CloneObject(this.oBaseSeriesLine);
				
				// X축 설정
				//this.lfn_GetCategoryAxes(oOption, oCategoryField);
				//oOption["xaxis"]["Use"] = false;
				oOption["xaxis"] = {"Use" : false};

				// Y축 설정
				this.lfn_GetValueAxes(oOption, arrSeriesField , "yaxis", "y1");
				oOption["yaxis"]["Position"] = "right";
				if (oOption["margin"]["Right"] == null)		oOption["margin"]["Right"] = this.MARGIN_H;
				
				// [LineChart] 차트유형설정
				if (sLineType == "step") {
					oOption["line"] = {"Stepped" : true};
				} else if (sLineType == "curve") {
					oOption["line"] = {"Curve" : true};
				}
				
				// #430 CombinationChart에서 line 위치가 자동계산되도록 설정
				oOption["resizable"] = true;
			} else {
				// 차트별 옵션 기본값 설정
				oOption = this.lfn_CloneObject(this.oBaseSeriesBar);
		
				// X축 설정
				this.lfn_GetCategoryAxes(oOption, oCategoryField);
			
				// Y축 설정
				this.lfn_GetValueAxes(oOption, arrSeriesField);
			}
			
			// 차트색상 설정
			oOption["colors"] = arrColor;
			
			// 툴팁
			oOption["tooltips"] = this.lfn_CloneObject(this.oBaseTooltip);
			oOption["tooltips"]["Data"] = '%{key}';
			oOption["tooltips"]["FormattedKeyLabels"] = arrLabel;
			
			// 애니메이션 설정 (draw, grow,wave)
			oOption["combined"] = {"Effect" : sAniType, "FocedUseYAxis" :true};
			
			// 데이터
			oProp["data"] = arrData;
			
			// DXChart 유형
			oChart["charttype"] = sChartType;
			
			// DXChart 유형
			oChart["chartclassid"] = sChartClassId;
			
			// 애니메이션 설정 (draw, grow,wave)
			oChart["anitype"] = sAniType;
			
			// 카테고리 설정
			oChart["category"] = oCategoryField.id;
			
			// 속성
			oChart["prop"] = oProp;
			
			// 차트옵션
			oChart["option"] = oOption;
			
			// 차트정보 추가
			arrChart.push(oChart);
			
			// 모든차트 동일한 Margin값을 위해 최대값 저장
			oMargin = oOption["margin"];
			
			if (oMargin) {
				nMaxLeft = Math.max(nMaxLeft, nexacro.toNumber(oMargin["Left"],0));
				nMaxTop = Math.max(nMaxTop, nexacro.toNumber(oMargin["Top"],0));
				nMaxRight = Math.max(nMaxRight, nexacro.toNumber(oMargin["Right"],0));
				nMaxBottom = Math.max(nMaxBottom, nexacro.toNumber(oMargin["Bottom"],0));
			}
			
			// 초기화
			arrData  = [];
			arrLabel = [];
			arrColor = [];
		}
		else
		{
			arrData.push("bind:" + oField.id);
			arrLabel.push(oField.label);
			arrColor.push(this.lfn_GetChartColor(i,arrThemeColor));
		}
		
		sPreChkValue = sChartType;
	}
	
	//this.lfn_Log("nMaxLeft : " + nMaxLeft + " nMaxTop : " + nMaxTop + " nMaxRight : " + nMaxRight + " nMaxBottom : " + nMaxBottom);
	
	// 범례 및 여백 설정
	if (arrChart.length > 0)
	{
		for(var i=0; i < arrChart.length; i++)
		{
			oChart = arrChart[i];
			oOption = oChart["option"];
				
			// 첫번째 항목에 범례정보 설정
			if (i==0)
			{
				// 범례 설정 전 최대 Margin값과 현재 설정된 Margin값 차이 계산
				nDiffRight = nMaxRight - nexacro.toNumber(oOption["margin"]["Right"],0);
				nDiffBottom = nMaxBottom - nexacro.toNumber(oOption["margin"]["Bottom"],0);
				
				// 범례 설정(margin값 모두 설정 후 호출필요)
				if (sLegendPosition != "none")
				{
					this.lfn_GetChartLegend(oOption, this.oGenerationAttr.attributes, arrLegend);
					oOption["key"]["Colors"] = arrThemeColor;
					
					// 범례 유형에 따라 범례 여백을 기존 여백값에 추가
					if (sLegendPosition == "right") {
						if (oOption["margin"]["Right"]) {
							nMaxRight = nexacro.toNumber(oOption["margin"]["Right"],0) + nDiffRight;
							oOption["key"]["PositionOffsetX"] =  nexacro.toNumber(oOption["key"]["PositionOffsetX"],0) + nDiffRight;
						}
					} else if (sLegendPosition == "bottom") {
						if (oOption["margin"]["Bottom"]) {
							nMaxBottom = nexacro.toNumber(oOption["margin"]["Bottom"],0) + nDiffBottom;
							oOption["key"]["PositionOffsetY"] =  nexacro.toNumber(oOption["key"]["PositionOffsetY"],0) + nDiffBottom;
						}
					}
				}
			}
			
			// 모든차트에 동일한 Margin값 적용
			if (nMaxLeft > 0)		oOption["margin"]["Left"] = nMaxLeft;
			if (nMaxTop > 0)		oOption["margin"]["Top"] = nMaxTop;
			if (nMaxRight > 0)		oOption["margin"]["Right"] = nMaxRight;
			if (nMaxBottom > 0)		oOption["margin"]["Bottom"] = nMaxBottom;
		}
	}
	
    return arrChart;
};]]></Script>
</ViewTemplateInfo>
