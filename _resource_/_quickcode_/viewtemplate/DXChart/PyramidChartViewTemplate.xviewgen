<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="2.0">
  <ViewTemplate id="PyramidChartViewTemplate" viewtype="DXChart" description="Hierarchical data visualization generation (Pyramid Chart)"/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/**
*  [DXChart] PyramidChart View Template
*  @FileName 	PyramidChartViewTemplate.xviewgen 
*  @Creator 	Lauren
*  @CreateDate 	2024.01.22
*  @Desction    Hierarchical data visualization generation (Pyramid Chart)
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2024.01.22     		Creator       	      		최초 생성
*******************************************************************************
*/
/************************************************************************************************
 * include 선언부
 ************************************************************************************************/
include "quickcode::viewtemplate/lib/dxlib.xjs";
include "quickcode::viewtemplate/lib/dxchart.xjs";
/************************************************************************************************
 * 변수 선언 영역
 ************************************************************************************************/
// TODO : Sketch에서 상수&변수 초기화가 되지 않아 임시로 작업
fn_InitVariable = function()
{
	// 공통변수 초기화
	this.lfn_InitCommonVariable();
	
	//--------------------------------------------------------------------------------------------------------
	// ViewTemplate 상수
	//--------------------------------------------------------------------------------------------------------
	// View 여백
	this.VIEW_PADDING = "20";		// 타이틀 기능 넣을떄 : "0 20 20"
	//--------------------------------------------------------------------------------------------------------
	
	//--------------------------------------------------------------------------------------------------------
	// [DXChart] 변수
	//--------------------------------------------------------------------------------------------------------
	// 필드 정보
	this.oChartFieldInfo = {
		  "category"	: null
		, "series"		: []
		, "select"		: null
	};
	//--------------------------------------------------------------------------------------------------------
};

// 초기값 선언용
fn_InitVariable();
/************************************************************************************************
 * Nexacro Studio 호출 필수 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   : 
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr)
{
	//리턴 값
    var vResult = "";
	
	// Preview용 데이터 생성여부
	var bPreviewMode = false;
	
	vResult = fn_GetViewGeneration(fieldarray, contents, generationattr, bPreviewMode);
	
	 //뷰 컴포넌트 정보 리턴
    return vResult;
};

// Preview용 Generation 함수(Chart는 Dataset에 Data가 없는 경우 Preview가 표시되지 않아 기능추가)
fn_GetViewGenerationPreview = function(fieldarray, contents, generationattr)
{
	//리턴 값
    var vResult = "";
	
	// Preview용 데이터 생성여부
	var bPreviewMode = true;
	
	vResult = fn_GetViewGeneration(fieldarray, contents, generationattr, bPreviewMode);
	
	 //뷰 컴포넌트 정보 리턴
    return vResult;
};

// ViewGeneration 결과 반환 함수
fn_GetViewGeneration = function(fieldarray, contents, generationattr, bPreviewMode)
{
	//리턴 값
    var vResult = "";

    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);
	
	/*********/
	//{{ nexacro sketch - pyramidchart view template
	if(fieldarray)
	{
		var oTempField;
		var bSettedCategory = false;
		var bSettedSeries = false;
		var oCategoryField, oSeriesField;
		
		var oTempFieldArray = JSON.parse(fieldarray);
		var oTempGenAttrArray = JSON.parse(generationattr);
		//var oTempContents = JSON.parse(contents);
		
		// 변수 초기화(TODO : Sketch에서 상수&변수 초기화가 되지 않아 임시로 작업)
		fn_InitVariable();
		
		//var nTempWidth = oTempContents.View.referenceinfo.realwidth;
		//var nTempHeight = oTempContents.View.referenceinfo.realheight;
		
		// Sketch용 옵션
		var sTitleText = oTempGenAttrArray.attributes.titletext;
		var sChartThemeType = oTempGenAttrArray.attributes.chartthemetype;
		var sSeriesType = oTempGenAttrArray.attributes.seriestype;
		
		// Sketch용 공통 Sketch Attribute 초기화
		this.lfn_InitAttribute(oTempFieldArray, oTempGenAttrArray);
		
		if (oTempFieldArray)
		{
			var arrTempFields = oTempFieldArray.fields;
			for(var i=0; i<arrTempFields.length; i++)
			{
				oTempField = arrTempFields[i];
				
				if (oTempField.id == "TREELEVEL")
				{
					oTempField.displaytype = "none";
				}
				else if (oTempField.datatype == "STRING" && bSettedCategory == false)
				{
					oTempField.displaytype = "category";
					bSettedCategory = true;
					oCategoryField = oTempField;
				}
				else if ((oTempField.datatype == "INT" || oTempField.datatype == "FLOAT" || oTempField.datatype == "BIGDECIMAL") && bSettedSeries == false)
				{
					oTempField.displaytype = "series";
					bSettedSeries = true;
					oSeriesField = oTempField;
				}				
			}
			
			if (bSettedCategory == false)
			{
				this.lfn_Log("It must select at least one field of 'Text' type.","error",true);
				return;
			}
			if (bSettedSeries == false)
			{
				this.lfn_Log("It must select at least one field of 'INT' type.","error",true);
				return;
			}
			
// 			if (this.lfn_IsNotNull(oCategoryField) && this.lfn_IsNotNull(oSeriesField))
// 			{
// 				//oSeriesField.itemtext = "expr:" + oCategoryField.id + "+'\n'+(" + oSeriesField.id + "/dataset.getSum("" + oSeriesField.id + "")*100).toFixed(2) + "%"";
// 				oSeriesField.itemtext = "expr:" + oCategoryField.id + "+'\\n'+(Math.round(" + oSeriesField.id + "/dataset.getSum('" + oSeriesField.id + "')*100)) + '%'";
// 			}
// 			
			fieldarray = JSON.stringify(oTempFieldArray, null, "\t");
			//trace(">> fieldarray : " + fieldarray);
		}
		
		if (generationattr)
		{
			if (oTempGenAttrArray)
			{
 				oTempGenAttrArray.attributes.viewpadding = this.VIEW_PADDING;
				
				oTempGenAttrArray.attributes.titletext = sTitleText;
				oTempGenAttrArray.attributes.chartthemetype = sChartThemeType;
				oTempGenAttrArray.attributes.seriestype = sSeriesType;
				
				generationattr = JSON.stringify(oTempGenAttrArray, null, "\t");
				//trace(">> generationattr : " + generationattr);
			}
		}
	}
	
	//}} nexacro sketch - 첫번째 field를 categoty로 사용하는 barchart view template
	/*********/

     //Set Generation Info
	//this.oFieldArray : Model Information as JSON Object
	//this.oContents : View Component Information as JSON Object
	//this.oContents.View.Model : Model Information Initialization
	//this.oGenerationAttr : Setting Information as JSON Object
	this.lfn_MakeGenerationInfo(fieldarray, contents, generationattr, false);

	// View Padding 설정
	this.lfn_SetViewPadding();

	//모델정보 생성 함수 호출
	fn_GetModel(bPreviewMode);

	//InitValue 정보 생성 함수 호출
    this.oContents.View.InitValue = fn_GetInitValue();

	//Object 정보 생성 함수 호출
    this.oContents.View.Objects = fn_GetObjects(bPreviewMode);

	//Script 정보 생성 함수 호출
    this.oContents.View.Script = fn_GetScript();

	//뷰 컴포넌트 정보를 String으로 변환
    vResult = JSON.stringify(this.oContents, null, "\t");

    //trace(">> vResult : " + vResult);
	
    //뷰 컴포넌트 정보 리턴
    return vResult;
};
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function() {

    var sViewAttr = "";
    var oViewAttr = {
                        "attributes": [
							  this.oAttrTitleText					// Title Text
							, this.oAttrChartThemeType				// 차트테마
							, {
                                "id": "seriestype",
								"displaytext": "Type",
                                "edittype": "Enum",
                                "defaultvalue": "pyramid",
                                "enumlist" : ["pyramid", "invertpyramid", "funnel", "boxfunnel"],
                                "description": "Set the pyramid chart of type"
												+ "\n" + " - pyramid : Shows data from largest at the bottom to smallest at the top (pyramid)"
												+ "\n" + " - invertpyramid : Shows data from largest at the top to smallest at the bottom (pyramid)"
												+ "\n" + " - funnel : Shows data from largest at the top to smallest at the bottom (funnel)"
												+ "\n" + " - boxfunnel : Shows data from largest at the top to smallest at the bottom (boxfunnel)"
                            }
                        ]
                  };
				  
	oViewAttr["attributecount"] = oViewAttr["attributes"].length;

	sViewAttr = JSON.stringify(oViewAttr, null, "\t");
    return sViewAttr;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
	var sFieldAttr = "";

	var oFieldAttr = {
                        "attributes": [
                            {
                                "id"			: "displaytype",
                                "edittype"		: "Enum",
								"enumlist" 		: ["none", "category", "series"],
                                "defaultvalue"	: "none",
                                "description"	: "데이터 표현방식"
												+ "\n" + " - none : 사용안함"
												+ "\n" + " - category : 데이터명 Field(1개)"
												+ "\n" + " - series : 데이터값 Field(1개)"
                            }
                        ]
                  };
				  
	oFieldAttr["attributecount"] = oFieldAttr["attributes"].length;

 	sFieldAttr = JSON.stringify(oFieldAttr, null, "\t");

    return sFieldAttr;
}
 
/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : model contents (JSON format)
 * Description  : Function to generate a component source based on field information of the model entered by the user
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function(bPreviewMode)
{
	// Chart Attribute
	var oChartAttr = {};

	// Title 영역
	var sTitleText			= this.oGenerationAttr.attributes.titletext;			// 타이틀 Text
	this.VIEW_PADDING_TOP	= this.lfn_MakeTitleArea(sTitleText, "false", "none");
	
	// 차트 기본속성 셋팅
	oChartAttr = this.lfn_CloneObject(this.oBaseChartAttr);
	
	// View 여백 설정
	oChartAttr["left"] = this.VIEW_PADDING_LEFT;
	oChartAttr["top"] = this.VIEW_PADDING_TOP;
	oChartAttr["right"] = this.VIEW_PADDING_RIGHT;
	oChartAttr["bottom"] = this.VIEW_PADDING_BOTTOM;
	
	//모델 필드 갯수 가져오기
    var nFieldCount = this.oFieldArray.fieldcount;
	
	var arrField = new Array(); 
	
	// 카테고리 필드
	this.oChartFieldInfo.category = null;
	
	// 시리즈 필드
	this.oChartFieldInfo.series = new Array();
	
	//차트에서 사용할 모델 Field ID 리스트 만들기
    for(i=0;i<nFieldCount;i++)
    {
        oField = this.oFieldArray.fields[i];
		sDisplaytype = oField.displaytype;
		
		// this.oFieldArray Json Data로 Field Array() 셋팅
		arrField.push(oField.id);
		
		// displaytype에 따라 Array() 셋팅
		if (sDisplaytype == "category") {
			if(this.lfn_IsNull(this.oChartFieldInfo.category)) {
				this.oChartFieldInfo.category = oField;
			} else {
				this.lfn_Log("Only one 'category' can be specified.","warn");
			}
		} else if (sDisplaytype == "series") {
			if (this.oChartFieldInfo.series.length == 0) {
				this.oChartFieldInfo.series.push(oField);
			} else {
				this.lfn_Log("Only one 'series' can be specified.","warn");
			}
		} else if (sDisplaytype == "select") {
			if (this.lfn_IsNull(this.oChartFieldInfo.select)) {
				this.oChartFieldInfo.select = oField.id;
			} else {
				this.lfn_Log("Only one 'select' can be specified.","warn");
			}
			
		}
    }
	
	// Preview모드일때 Field 예외처리
	if (bPreviewMode == true)
	{
		// category없는 경우 예외처리
		if(this.lfn_IsNull(this.oChartFieldInfo.category))
		{
			this.oChartFieldInfo.category = this.lfn_Nvl(this.oFieldArray.fields.find(oField => oField.datatype == "STRING"),this.oFieldArray.fields[0]);
		}
		
		// series없는 경우 예외처리
		if(arrSeriesField.length==0)
		{
			// 숫자형 데이터 filter
			var oFilterField = this.oFieldArray.fields.find(oField => oField.datatype == "INT" || oField.datatype == "FLOAT" || oField.datatype == "BIGDECIMAL");
			
			if (this.lfn_IsNotNull(oFilterField))
			{
				this.oChartFieldInfo.series.push(oFilterField);
			}
		}
	}
	
	//차트 컴포넌트 추가
	var oModel = this.oContents.View.Model;
    oModel[oModel.length] = {
            "fieldid" : arrField.join(","),
            "Components" :
            [
                {
                    "tag" : "ChartJS",
                    "attribute" : oChartAttr,
                }
            ]
        }

	//생성할 Model 정보 리턴
    return oModel;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function()
{
    var oInitValue = [];
	
    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function(bPreviewMode)
{
	//오브젝트 정보 초기화
    var oObjects = [];
	
	var nRowCnt = 0;
	var arrRows;
	
	// Preview일때 임시데이터 생성
	if (bPreviewMode)
	{
		nRowCnt = 5;
		arrRows = this.lfn_GetPreviewData(this.oFieldArray,nRowCnt);
	}
	
	// viewdataset 생성
	var oViewDataset = this.lfn_GetDataset("viewdataset", this.oFieldArray, nRowCnt, arrRows);

	//Object Information Setting
	oObjects.push(oViewDataset);
	
    return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Parameter    :
 *                - this.oFieldArray : model field data
 *                - this.oContents : view contents
 *                - this.oGenerationAttr : attributes for view generation
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function()
{
	//Initialize Script Information
    var oScript = {};
	var arrChart = [];
    var sScript = "";
	var sSetDXChart = "";
	
	var sViewNm				= this.oContents.View.attribute.id;
	var sTitleText			= this.oGenerationAttr.attributes.titletext;			// 타이틀 Text
	var sUseExpandButton	= this.oGenerationAttr.attributes.useexpandbutton;		// expand 토글버튼 사용여부 및 초기값
	var sUseTotalCount		= this.oGenerationAttr.attributes.usetotalcount;		// 전체건수 표시여부
	
	// 컴포넌트 공통 ViewScript 반환
	//sScript = this.lfn_GetCompCommonScript(sViewNm);
	
	// 타이틀 Expand버튼 동작 스크립트
	if (this.lfn_IsNotNull(sTitleText))
	{
		sScript += this.lfn_GetTitleScript(sViewNm, sUseExpandButton, sUseTotalCount);
	}
	
	// DXChart 스크립트 가져오기
	arrChart = fn_GetDxChart();
	sSetDXChart = this.lfn_GetDxChartScript(arrChart);
	
	// DXChartScript 공통스크립트 가져오기
	sScript += this.lfn_GetCommonDXChartScript(sViewNm, sSetDXChart);

	if (this.lfn_IsNotNull(sScript))
	{
		sScript = nexacro.replaceAll(sScript,"\t","");
		
		oScript =
		{
			"tag": "Script",
			"attribute": { "type" : "xscript5.1" },
			"value": sScript
		}
	};
	
	//Return Script Information
    return oScript;
};

// DXChart 정보 
fn_GetDxChart = function()
{
	var arrChart = [];
	
	// 시리즈 셋팅
	arrChart = fn_GetSeries(this.oChartFieldInfo);
	
	return arrChart;
};

// 시리즈 셋팅
fn_GetSeries = function(oChartFieldInfo)
{
	var sChartThemeType = this.oGenerationAttr.attributes.chartthemetype;
	var sSeriesType = this.oGenerationAttr.attributes.seriestype;
	var sChartType;
	
	var arrChart = [];
	var oChart = {};
	var oProp = {};
	var oOption = {};
	
	var oCategoryField = oChartFieldInfo.category;
	var arrSeriesField = oChartFieldInfo.series;
	
	var oField;
	
	var arrThemeColor = this.lfn_GetChartThemeColor(sChartThemeType);
	
	var arrData  = [];
	
	// 차트종류
	if (sSeriesType == "funnel" || sSeriesType == "boxfunnel")
	{
		sChartType = "funnel";
		
		// 옵션 기본값
		oOption = this.lfn_CloneObject(this.oBaseSeriesFunnel);
		
		if (sSeriesType == "boxfunnel")
		{
			oOption["variant"] = { "Value" : 'box' };
			oOption["line"] = { "Width" : 20 };
			oOption["colorsStroke"] = '#ffffff';
		}
		
		oOption["margin"] = {"Left" : 150};
	}
	else
	{
		sChartType = "pyramid";
		
		// 옵션 기본값
		oOption = this.lfn_CloneObject(this.oBaseSeriesPyramid);
		
		if (sSeriesType == "invertpyramid")
		{
			oOption["ascending"] = false;
		}
	}
	
	// DXChart 유형
	var sChartClassId = this.lfn_GetChartClassId(sChartType);
	
	// 애니메이션 설정 (draw, grow, wave)
	var sAniType = this.lfn_GetSeriesAni(sChartClassId, true);
	
	// 데이터
	for(var i=0;i<arrSeriesField.length;i++)
	{
		oField = arrSeriesField[i];
		
		arrData.push("bind:" + oField.id);
	}
	
	// 
	oOption["text"] = { "Boxed" : false };
	
	// 데이터 Text
	oOption["labels"] = this.lfn_CloneObject(this.oBaseLabels);
	oOption["labels"]["Data"] = "bind:" + oCategoryField.id;
	oOption["labels"]["Sticks"] = true;
	
	if (sChartType == "funnel")
	{
		oOption["labels"]["X"] = 50;
		oOption["labels"]["Position"] = 'section';
	}
	
	// 차트색상 설정
	oOption["colors"] = arrThemeColor;
	
	// 툴팁
	oOption["tooltips"] = this.lfn_CloneObject(this.oBaseTooltip);
	oOption["tooltips"]["Data"] = '%{key}';
	//oOption["tooltips"]["Data"] = "%{property:labelsData[%{index}]}<br/>%{value_formatted}";
	oOption["tooltips"]["FormattedKeyLabels"] = "bind:" + oCategoryField.id;
	
	// 데이터
	oProp["data"] = arrData;
	
	// DXChart 유형
	oChart["charttype"] = sChartType;
	
	// DXChart 유형
	oChart["chartclassid"] = sChartClassId;
	
	// 애니메이션 설정 (draw, grow,wave)
	oChart["anitype"] = sAniType;
	
	// 카테고리 설정
	oChart["category"] = oCategoryField.id;
	
	// 속성
	oChart["prop"] = oProp;
	
	// 차트옵션
	oChart["option"] = oOption;
	
	//this.lfn_Log(oChart);
		
	// 차트정보 추가
	arrChart.push(oChart);
		
    return arrChart;
};]]></Script>
</ViewTemplateInfo>
