<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="SearchLayoutViewTemplate" viewtype="Search" description="Search conditions view generation (with Fluid Layout)"/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/**
*  Search Layout View Template
*  @FileName 	SearchLayoutViewTemplate.xviewgen
*  @Creator 	Creator
*  @CreateDate 	2023.10.11
*  @Desction    Search conditions view generation (with Fluid Layout)
*  @version		1.0.0.0
************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2023.10.11     		Creator       	    	최초 생성
*******************************************************************************
*/
/************************************************************************************************
 * include 선언부
 ************************************************************************************************/
include "quickcode::viewtemplate/lib/util.xjs";
include "quickcode::viewtemplate/lib/common.xjs";
/************************************************************************************************
 * 변수 선언 영역
 ************************************************************************************************/
// View 여백
this.VIEW_PADDING				= "10";
// 컴포넌트 생성 방향("horizontal", "vertical")
this.DIRECTION				= "horizontal";
// 컴포넌트 생성 수평 정렬방식
this.HALIGN					= "left";
// 컴포넌트 생성 수직 정렬방식
this.VALIGN					= "top";
//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------
// 타이틀 객체 관련 상수
//--------------------------------------------------------------------------------------------------------
//타이틀 영역 전체건수 표시여부(Freeform에서는 사용안함)
this.USE_TOT_COUNT			= "false";
//타이틀 영역 접기/펼치기 버튼 표시여부("none", "open","close")(Freeform에서는 사용안함)
this.USE_EXPAND_BUTTON		= "none";
//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------
// 조회 버튼 객체 관련 상수
//--------------------------------------------------------------------------------------------------------
//Lookup Button Default Width
this.SEARCH_BUTTON_WIDTH		= 100;

//Lookup Button Default Height
this.SEARCH_BUTTON_HEIGHT		= 30;

// 조회버튼과 컴포넌트와의 가로 간격
this.SEARCH_BUTTON_H_SPACE		= 10;

//Lookup Button Default Text
this.SEARCH_BUTTON_TEXT			= "Search";

//Lookup Button Default Form
this.SEARCH_BUTTON_TYPE			= "bottom";

//Lookup Button Css Class
this.SEARCH_BUTTON_CSSCLASS		= "btn_search";
//--------------------------------------------------------------------------------------------------------
//Label과 Comp영역 배치방식("horizontal", "vertical")
this.FIELD_POSITION				= "horizontal";

//Component Default Width
this.COMP_WIDTH					= "115px";

//Component Default Height
this.COMP_HEIGHT				= "26px";

//Label Default Size
this.LABEL_SIZE					= 86;

//Component Default Type
this.COMP_TYPE				= "auto";

//Label Default Type
this.LABEL_TYPE				= "static";

//fieldposition이 "horizontal"일때(라벨과 컴포넌트가 좌우배치) 간격
this.H_LABEL_COMP_SPACE		= 5;

//fieldposition이 "vertical"일때(라벨과 컴포넌트가 상하배치) 간격
this.V_LABEL_LINE_SPACE		= 5;

//fieldposition이 "horizontal"일때(라벨과 컴포넌트가 좌우배치) Component Padding
this.H_COMP_PADDING_LEFT		= 5;

//fieldposition이 "vertical"일때(라벨과 컴포넌트가 상하배치) Component Padding
this.V_COMP_PADDING_TOP			= 5;

// SearchLayoutViewTemplate 지원안함. (컴포넌트 Padding을 지원하기 위해서는 Panel을 더 추가해야되서 미지원)
this.H_COMP_PADDING_TOP			= 0;			// 미지원
this.H_COMP_PADDING_RIGHT		= 0;			// 미지원
this.H_COMP_PADDING_BOTTOM		= 0;			// 미지원
this.V_COMP_PADDING_LEFT		= 0;			// 미지원
this.V_COMP_PADDING_RIGHT		= 0;			// 미지원
this.V_COMP_PADDING_BOTTOM		= 0;			// 미지원

//Gap Between Components (Left and Right)
this.COMP_SPACE					= 0;

//Gap Between Components (Top and Bottom)
this.LINE_SPACE					= 5;

// Layout에서 mergelabel옵션 기본값
this.MERGE_LABEL				= "false";

//mergelabeldl "true"일때 (라벨1개 고정일때) Gap Between Components (Left and Right)
this.MERGE_LABEL_COMP_SPACE		= 0;

//mergelabeldl "true"일때 (라벨1개 고정일때) Gap Between Components (Top and Bottom)
this.MERGE_LABEL_LINE_SPACE		= 5;

//Component Default CSS Class
this.COMP_CSSCLASS			= "";

//Required Component Default CSS Class
this.COMP_REQUIRED_CSSCLASS	= "com_essential";

//Label Default CSS Class
this.LABEL_CSSCLASS				= "sta_label";

//Required Label Default CSS Class
this.LABEL_REQUIRED_CSSCLASS	= "sta_label_essential";

//View Css Class
this.VIEW_CSSCLASS			= ""; //"view_searchbox";

//Component Use Type
this.USE_COMP				= "true";

//Component Readonly
this.COMP_READONLY			= "false";

//Component Readonly시 Static형식으로 표시(border없고, 투명배경, 추가버튼안보이게)
this.COMP_READONLY_LABEL_STYLE	= "false";

//Component Readonly시 Static형식 CSS Class
this.COMP_READONLY_CSSCLASS	= "com_View";

// format에서 지정한 사이즈를 사용할지 여부
this.USE_FORMAT_SIZE		= "false";

//FluidLayout을 Panel에 적용할지 여부(NexacroSketch에서는 View의 FluidLayout을 사용할 수 없어 Panel로 사용해야함)
//NexacroSketch에서는 필수로 "true"값 설정
this.USE_ROOT_PANEL			= "false";
//////////////////////////////Constant Setting END ////////////////////////////////////////////////////
/************************************************************************************************
 * Nexacro Studio 호출 필수 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_InitViewAttributes
 * Return       : 
 * Description  : LCAP Tool에서 일부 view attribute 속성을 노출하지 않기로 결정함에 따라 각 속성값을 기본값으로 셋팅해준다.
 *---------------------------------------------------------------------------------------------*/
fn_InitViewAttributes = function(generationattr)
{
	var oTempGenAttrArray = JSON.parse(generationattr);
	
	// 'view generation attributes' setting
	if (oTempGenAttrArray)
	{
		oTempGenAttrArray.attributes.searchbuttoncssclass = this.SEARCH_BUTTON_CSSCLASS;
		oTempGenAttrArray.attributes.viewcssclass = this.VIEW_CSSCLASS;
		
		generationattr = JSON.stringify(oTempGenAttrArray, null, "\t");
	}
	
	return generationattr;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_InitFieldAttributes
 * Return       : 
 * Description  : LCAP Tool에서 user attribute 속성을 제거함에 따라 각 속성값을 기본값으로 셋팅해준다.
 *---------------------------------------------------------------------------------------------*/
fn_InitFieldAttributes = function(fieldarray, generationattr)
{
	// field attributes setting
	var oTempFieldArray = JSON.parse(fieldarray);
	var oTempGenAttrArray = JSON.parse(generationattr);
	
	var nFieldCount;
	var oTempField;
	
	if (oTempFieldArray)
	{
		nFieldCount = oTempFieldArray.fieldcount;
		
		for(i=0; i<nFieldCount; i++)
		{
			oTempField = oTempFieldArray.fields[i];
			
			// 사용자에게 입력받지 않으므로 default 값으로 셋팅
			oTempField.comptype = this.COMP_TYPE;
			oTempField.compwidth = this.COMP_WIDTH;
			oTempField.compheight = this.COMP_HEIGHT;
			oTempField.labelsize = (oTempField.uselabel == "false") ? -1 : this.LABEL_SIZE;
			oTempField.fieldposition = this.FIELD_POSITION;
			oTempField.cssclass = this.COMP_CSSCLASS;
			oTempField.labelcssclass = this.LABEL_CSSCLASS;
			oTempField.compreadonly = this.COMP_READONLY;
			oTempField.usecomp = this.USE_COMP;
		}
		
		fieldarray = JSON.stringify(oTempFieldArray, null, "\t");
		//trace(">> fieldarray : " + fieldarray);
	}
	
	//var vResult = JSON.stringify(fieldarray, null, "\t");
    //trace(">> fieldarray : " + vResult);
		
	return fieldarray;
};

/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   :
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr)
{

	//Return Value
    var vResult = "";

    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);
	
	if (generationattr)
	{
		// 일부 view attributes 속성을 노출하지 않음으로써 기본값 셋팅
		generationattr = fn_InitViewAttributes(generationattr);
	}
	
	if(fieldarray)
	{
		// user attribute 속성을 제거함에 따라 각 속성값을 기본값으로 셋팅
		fieldarray = fn_InitFieldAttributes(fieldarray, generationattr);
	}

    //Make Generation Info
	//this.oFieldArray : Model Information as JSON Object
	//this.oContents : View Component Information as JSON Object
	//this.oContents.View.Model : Model Information Initialization
	//this.oGenerationAttr : Setting Information as JSON Object
	//this.oUseFieldArray : Use Model Information as JSON Object
	this.lfn_MakeGenerationInfo(fieldarray, contents, generationattr, true);
	
	// View Padding 설정
	this.lfn_SetViewPadding();
	
	//Layout 설정(FluidLayout)
	//this.lfn_GetLayout(sDirection, sHAlign, sVAlign, sViewPadding, nHorizontalGap, nVerticalGap, sLayoutType, sViewFittocontents)
	var sDirection = this.oGenerationAttr.attributes.direction;
	var sViewFittocontents = sDirection == "vertical" ? "width" : "height";
	this.oLayoutRoot = this.lfn_GetLayout("horizontal","right","top", this.VIEW_PADDING, this.SEARCH_BUTTON_H_SPACE, this.LINE_SPACE, "horizontal"/*, sViewFittocontents*/);
	
	//Load Model Information Generation Function
	fn_GetModel();

	//Load InitValue Information Generation Function
    this.oContents.View.InitValue = fn_GetInitValue();

	//Load Object Information Generation Function
    this.oContents.View.Objects = fn_GetObjects();

	//Load BindInfo Information Generation Function
    this.oContents.View.Bind = fn_GetBind();

	//Load Script Information Generation Function
    this.oContents.View.Script = fn_GetScript();

	//Convert View Component Information into String
    vResult = JSON.stringify(this.oContents, null, "\t");

    //trace(">> vResult : " + vResult);
    //Return View Component Information
    return vResult;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function()
{
    var sViewAttr = "";
    var oViewAttr = {
                        "attributes": [
                            {
                                "id": "direction",
								"displaytext": "Direction",
                                "edittype": "Enum",
                                "defaultvalue": this.DIRECTION,
								"enumlist" : ["horizontal", "vertical"],
                                "description": "Set the direction for components"
												+ "\n" + " - horizontal : Set component horizontal alignment"
												+ "\n" + " - vertical : Set component vertical alignment"
                            },
							{
                                "id": "searchbuttontype",
								"displaytext": "Button Position",
                                "edittype": "Enum",
                                "defaultvalue": this.SEARCH_BUTTON_TYPE,
								"enumlist" : ["none", "top", "middle", "bottom", "full"],
                                "description": "Set button position (based on view height)"
												+ "\n" + " - none : Do not use the button"
												+ "\n" + " - top :  Position at the top"
												+ "\n" + " - middle : Position in the middle"
												+ "\n" + " - bottom : Position at the bottom"
												+ "\n" + " - full : Fill the entire view height"
                            },
							{
                                "id": "searchbuttontext",
								"displaytext": "Button Text",
                                "edittype": "String",
                                "defaultvalue": this.SEARCH_BUTTON_TEXT,
								"description": "Set the button text"
                            }/*,
							{
                                "id": "searchbuttoncssclass",
								"displaytext": "Button CSS",
                                "edittype": "String",
                                "defaultvalue": this.SEARCH_BUTTON_CSSCLASS,
								"description": "Set the button CSS class"
                            },
							{
                                "id": "viewcssclass",
								"displaytext": "View CSS",
                                "edittype": "String",
                                "defaultvalue": this.VIEW_CSSCLASS,
								"description": "Set the view class"
                            },
							{
                                "id": "format",
								"displaytext": "Layout",
                                "edittype": "layout",
								"defaultvalue": "",
								"userproperties" : {
									"propertycount" : "2",
									"properties" :
									[
										{
											"id" : "mergelabel", "edittype" : "Boolean", "defaultvalue" : this.MERGE_LABEL
											, "description" : "다중 field 설정 시 label 통합표시 여부"
															+ "\n" + " - 첫번째 field 기준으로 생성됩니다."
										}
										, {
											"id" : "useformatsize", "edittype" : "Boolean", "defaultvalue" : this.USE_FORMAT_SIZE
											, "description" : "format에서 설정된 사이즈를 유지할지 여부"
										}
									]
								},
								"description": "Set the view layout"
                            }*/
							//, this.oAttrViewPadding					// View 여백(사용안하는 경우 주석)
                        ]
                  };

	oViewAttr["attributecount"] = oViewAttr["attributes"].length;

	sViewAttr = JSON.stringify(oViewAttr, null, "\t");
    return sViewAttr;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
	var sFieldAttr = "";
	/*var oFieldAttr = {
                        "attributes": [
                            {
                                "id": "comptype",
                                "edittype": "Enum",
								"enumlist" : this.ARR_COMP_TYPE,
                                "defaultvalue": this.COMP_TYPE,
                                "description": "Types of Components to be Expressed"
                            },
							{
                                "id": "compwidth",
                                "edittype": "String",
								"defaultvalue": this.COMP_WIDTH,
                                "description": "Component Width(px or %)"
                            },
							{
                                "id": "compheight",
                                "edittype": "String",
								"defaultvalue": this.COMP_HEIGHT,
                                "description": "Component Height(px or %)"
                            },
							{
                                "id": "labelsize",
                                "edittype": "Number",
								"defaultvalue": this.LABEL_SIZE,
                                "description": "Label Size(px)"
												+ "\n" + " - fieldposition값에 따라 width(horizontal), height(vertical)사이즈로 동작됩니다."
                            },
							{
                                "id": "fieldposition",
                                "edittype":  "Enum",
								"defaultvalue": this.FIELD_POSITION,
								"enumlist" : ["horizontal", "vertical"],
                                "description": "Label과 Comp영역 위치"
												+ "\n" + " - horizontal : 좌우배치"
												+ "\n" + " - vertical : 상하배치"
                            },
							{
                                "id": "cssclass",
                                "edittype": "String",
								"defaultvalue": this.COMP_CSSCLASS,
                                "description": "Component CSS Class"
                            },
							{
                                "id": "labelcssclass",
                                "edittype": "String",
								"defaultvalue": this.LABEL_CSSCLASS,
                                "description": "Label CSS Class"
                            },
							{
                                "id": "compreadonly",
                                "edittype": "Boolean",
								"defaultvalue": this.COMP_READONLY,
                                "description": "Component Readonly"
                            },
							{
                                "id": "usecomp",
                                "edittype": "Boolean",
								"defaultvalue": this.USE_COMP,
                                "description": "Use Component"
                            }
                        ]
                  };

	oFieldAttr["attributecount"] = oFieldAttr["attributes"].length;

 	sFieldAttr = JSON.stringify(oFieldAttr, null, "\t");*/
    return sFieldAttr;
}
/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    :
 * Return       :
 * Description  : Model Information Production Function
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function()
{

	//Import View Component Width Value
	var nViewCompWidth = this.oContents.View.referenceinfo.realwidth;

	//Import View Component Height Value
	var nViewCompHeight = this.oContents.View.referenceinfo.realheight;
	
	//Import View Attribute
	var oViewAttr = this.oContents.View.attribute;
	
	// View CssClass 설정
	oViewAttr["cssclass"] = this.oGenerationAttr.attributes.viewcssclass;
	
	//Load Lookup Area Background Static Production Function
	var oCondPanel = fn_MakeSearchCondPanel();
	
	// View 사이즈에서 View 여백 설정
	nViewCompWidth = nViewCompWidth - this.VIEW_PADDING_LEFT - this.VIEW_PADDING_RIGHT;
	nViewCompHeight = nViewCompHeight - this.VIEW_PADDING_TOP - this.VIEW_PADDING_BOTTOM;
	
	//When the Lookup Button Type is Not None
	if(this.oGenerationAttr.attributes.searchbuttontype!="none")
	{
		//Load Lookup Button Production Function
		var arrViewSize = fn_MakeSearchButton(nViewCompWidth, nViewCompHeight);

		//Set area excluding lookup button area as component production area
		nViewCompWidth		= arrViewSize[0];
		nViewCompHeight		= arrViewSize[1];
	}
	
	// 조회조건 Panel에 컴포넌트 추가
	this.oLayoutRoot = oCondPanel;
	
	//If the format properties are set, produce component-based on layout rules
	if(this.oGenerationAttr.attributes.format)
	{
		//Import Layout Information
		var oLayout = this.lfn_StringToJson(this.oGenerationAttr.attributes.format);

		//Load Layout Calculation Function
		fn_CalcLayout(oLayout, nViewCompWidth, nViewCompHeight);

		//Load Layout-based Component Production Function
		fn_MakeCompByLayout(oLayout);

	}
	//If the format properties are not set, create components based on basic rules
	else
	{
		//Import Field Information
		var arrFieldList = this.oUseFieldArray.fields;

		//Import Component Production Direction Information
		var sDirection = this.oGenerationAttr.attributes.direction;

		//Import Component Horizontal Alignment Information
		var sHAlign = this.oGenerationAttr.attributes.halign;

		//Import Component Vertical Alignment Information
		var sVAlign = this.oGenerationAttr.attributes.valign;
		
		//Load Component Location Calculation Information
		var arrFieldPosition = fn_CalcField(sDirection, sVAlign, sHAlign, nViewCompWidth, nViewCompHeight);
		
		//this.lfn_Log(arrFieldPosition);
		
		//Load Component Production Function
		//fn_MakeCompPanel(this.VIEW_PADDING_LEFT, this.VIEW_PADDING_TOP, nViewCompWidth, nViewCompHeight, sDirection, arrFieldPosition);
		fn_MakeCompPanel(0, 0, nViewCompWidth, nViewCompHeight, sDirection, arrFieldPosition);
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeSearchCondPanel
 * Parameter    :
 * Return       :
 * Description  : 조회조건용 Panel 생성
 *---------------------------------------------------------------------------------------------*/
fn_MakeSearchCondPanel = function()
{
	var oModel = this.oContents.View.Model;
	var oPanelClass = this.lfn_GetCompClass("panel");
	var sCondPanelId = this.lfn_GetCompId(oPanelClass.prefix + "_" + "SEARCH_COND");
	
	var sDirection = this.oGenerationAttr.attributes.direction;
	var nHorizontalGap = this.COMP_SPACE;
	var nVerticalGap = this.LINE_SPACE;
	var sFittocontents = sDirection == "vertical" ? "width" : "height";
	
	var oPanelAttr = {
				"id" : sCondPanelId
				, "left" : 0
				, "top" : 0
				, "width" : "100%"
				, "height" : "100%"
				, "type" : sDirection
				, "flexwrap" : "wrap"
				, "fittocontents" : sFittocontents
				, "horizontalgap" : nHorizontalGap
				, "verticalgap" : nVerticalGap
				, "flexcrossaxisalign" : "start"
				, "flexcrossaxiswrapalign" : "start"
				, "flexmainaxisalign" : "start"
	};
	
	var oCondPanel = { "tag" : oPanelClass.classId, "attribute" : oPanelAttr};
	
	oModel[oModel.length] ={ "fieldid" : this.VIEW_COMP_FIELD_ID, "Components" : [oCondPanel]};
	this.lfn_GetPanelContents(this.oLayoutRoot, [sCondPanelId]);
	
	return oCondPanel;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeSearchButton
 * Parameter    : nViewCompWidth : View Component Width Value
				  nViewCompHeight : View Component Height Value
 * Return       :
 * Description  : Lookup Button Creation Function
 *---------------------------------------------------------------------------------------------*/
fn_MakeSearchButton = function(nViewCompWidth, nViewCompHeight)
{
	//Import Lookup Button Form Information (none, top, middle, bottom, full)
	var sSearchButtonType = this.oGenerationAttr.attributes.searchbuttontype;
	
	if (sSearchButtonType=="none")	return;

	//Import Lookup Button CSS Class Information
	var sSearchButtonCssClass = this.oGenerationAttr.attributes.searchbuttoncssclass;

	//Import Lookup Button Text Information
	var sSearchButtonText = this.oGenerationAttr.attributes.searchbuttontext;

	var oModel = this.oContents.View.Model;
	var oField;
	var oComp;
	
	var sFlexCrossAxisAlign = "";

	var nCompTop = 0;
	var nCompLeft = 0;
	var nCompWidth = this.SEARCH_BUTTON_WIDTH;
	var nCompHeight = this.SEARCH_BUTTON_HEIGHT;

	//Create Field Tag
	oField = {"fieldid" : this.VIEW_COMP_FIELD_ID, "Components" : []};

	//If the lookup button creation location is top
	if(sSearchButtonType=="top")
	{
		sFlexCrossAxisAlign = "start";
	}
	//If the lookup button creation location is middle
	else if(sSearchButtonType=="middle")
	{
		sFlexCrossAxisAlign = "center";
	}
	//If the lookup button creation location is bottom
	else if(sSearchButtonType=="bottom")
	{
		sFlexCrossAxisAlign = "end";
	}
	//If the lookup button creation location is full
	else
	{
		sFlexCrossAxisAlign = "start";
		nCompHeight = "100%";
	}
	
	// 조회버튼 컴포넌트
	oField.Components[0] =
	{
		"tag" : "Button",
		"attribute" :
		{
			"id" : "btnSearch", "top" : nCompTop, "left" : nCompLeft, "width" : nCompWidth, "height" : nCompHeight,
			"minwidth" : nCompWidth,				// flexwrap가 nowrap일때 버튼 사이즈를 유지하기 위해 설정
			"cssclass" : sSearchButtonCssClass,
			"text" : sSearchButtonText
		}
	};
	
	// 조회버튼 컴포넌트 위치 설정
	this.oLayoutRoot["attribute"]["flexcrossaxisalign"] = sFlexCrossAxisAlign;
	
	// 조회버튼 영역 유지
	this.oLayoutRoot["attribute"]["flexwrap"] = "nowrap";
	
	//Set area excluding lookup button area as component production area
	nViewCompWidth = nViewCompWidth - this.SEARCH_BUTTON_WIDTH - this.SEARCH_BUTTON_H_SPACE;

	//Add Lookup Button Tag
	oModel[oModel.length] = oField;
	this.lfn_GetPanelContents(this.oLayoutRoot, ["btnSearch"]);
	
	return [nViewCompWidth, nViewCompHeight];
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcLayout
 * Parameter    : obj
 * Return       :
				- oLayout : Layout Setting Information
				- nViewCompWidth : View Component Real Width
				- nViewCompHeight : View Component Real Height
 * Description  : Layout Calculation Function
 *---------------------------------------------------------------------------------------------*/
fn_CalcLayout = function(oLayout, nViewCompWidth, nViewCompHeight)
{
	//CellList Information set on Layout
	var arrCellList = oLayout.celllist;

	//ColumnSize Information set on Layout
	var arrColSize = oLayout.columnsize;

	//RowSize Information set on Layout
	var arrRowSize = oLayout.rowsize;

	//CellList Quantity
	var nCellCnt = arrCellList.length;

	//The Sum of Column/Row Sizes that were not set as -1
	var nAllColSize = 0;
	var nAllRowSize = 0;

	//Quantity of Column/Row Size set as -1
	var nNoColSizeCnt = 0;
	var nNoRowSizeCnt = 0;

	//Replacement Size if Column/Row Size is -1
	var nColSizeDef = 0;
	var nRowSizeDef = 0 ;

	var oCell;
	var sDirection, sVAlign, sHAlign;
	var nCol, nRow, nColSpan, nRowSpan;
	var nColSize, nRowSize;
	var bMergeLabel;

	var nCompWidth;
	var nCompWidthType;
	var nFiledWidthMax;
	var nCompHeight;
	var nCompHeightType;
	var nCompHeightMax;

	//Evaluate Sum of Column Sizes that are not set as -1
	nAllColSize = arrColSize.reduce(function (pre, value){
		if(value==-1)return pre;
		else return pre + value;
	});

	//Evaluate Sum of Row Sizes that are not set as -1
	nAllRowSize = arrRowSize.reduce(function (pre, value){
		if(value==-1)return pre;
		else return pre + value;
	});

	if(nAllColSize==-1)nAllColSize = 0;

	if(nAllRowSize==-1)nAllRowSize = 0;

	//Evaluate Quantity of Column/Rows set as -1
	nNoColSizeCnt = arrColSize.filter(arrColSize=>arrColSize==-1).length;
	nNoRowSizeCnt = arrRowSize.filter(arrRowSize=>arrRowSize==-1).length;

	//If there are Column/Rows set as -1
	//(View Component Size -(The Sum of Column/Row Sizes not set as -1))/Number of Column/Rows set as -1
	if(nNoColSizeCnt>0)nColSizeDef = (nViewCompWidth - nAllColSize)/nNoColSizeCnt;
	if(nNoRowSizeCnt>0)nRowSizeDef = (nViewCompHeight - nAllRowSize)/nNoRowSizeCnt;

	//Save Default Column/Row Size on Layout
	oLayout.colsizedef = nColSizeDef;
	oLayout.rowsizedef = nRowSizeDef;

	//Evaluate the Field Location Value of each Cell
	for(var i=0;i<nCellCnt;i++)
	{
		//Import Information set on Cell
		oCell = arrCellList[i];
		sDirection = oCell.direction;
		sVAlign = oCell.valign;
		sHAlign = oCell.halign;
		nCol = nexacro.toNumber(oCell.col);
		nRow = nexacro.toNumber(oCell.row);
		nColSpan = nexacro.toNumber(oCell.colspan);
		nRowSpan = nexacro.toNumber(oCell.rowspan);
		bMergeLabel = oCell.mergelabel;

		//Initialize to 1 if there are no Col/RowSpan Values
		if(!nColSpan)nColSpan = 1;
		if(!nRowSpan)nRowSpan = 1;

		//Evaluate the Width/Height of that Cell
		nColSize = this.lfn_GetCellSize(oLayout.columnsize, nCol, nColSpan, nColSizeDef);
		nRowSize = this.lfn_GetCellSize(oLayout.rowsize, nRow, nRowSpan, nRowSizeDef);

		//Save the Width/Height Value on that Cell
		oCell.realcolsize = nColSize;
		oCell.realrowsize = nRowSize;

		//If there are fields connected to that Cell
		if(oCell.fieldlist)
		{
			if (bMergeLabel == "true")
			{
				//Evaluate the Field Location Value to input on that Cell
				oCell.fieldposition = fn_CalcFieldMergeLabel(sDirection, sVAlign, sHAlign, nColSize, nRowSize, oCell.fieldlist);
			}
			else
			{
				// sDirection, sVAlign, sHAlign에 따라 Cell 위치계산
				oCell.fieldposition = fn_CalcField(sDirection, sVAlign, sHAlign, nColSize, nRowSize, oCell.fieldlist);
			}
		}
	}
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcFieldMergeLabel
 * Parameter    :
				- sDirection : Component Production Direction
				- sVAlign : Component Vertical Alignment Method(top|middle|bottom)
				- sHAlign : Component Horizontal Alignment Method(left|center|right)
				- nColSize : The Width of The Cell to be Expressed
				- nRowSize : The Height of The Cell to be Expressed
				- arrFieldInCellList : Field List added on the Cell
 * Return       : arrFieldPosition : Object Array with Field Location Information
 * Description  : Function to Evaluate the Field Location Value to be Expressed
 *---------------------------------------------------------------------------------------------*/
fn_CalcFieldMergeLabel = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize, arrFieldInCellList)
{
	var nLeft = 0;
	var nTop = 0;
	var nRowIdx = 0;
	var nColIdx = 0;
	var nFiledWidthMax = 0;
	var nFiledHeightMax = 0;

	var nStartX, nStartY;
	var nEndX, nEndX;
	var nTemp;

	//Import Field List Registered to the Model
	var arrFieldList = this.oUseFieldArray.fields;

	//Number of Fields connected to the Cell
	var nFieldInCellCnt;

	//Object Array to save the Field Location Information
	var arrFieldPosition = [];

	var sFieldPosition;
	
	//Label Width
	var nLabelSize;
	
	//Size without the Label Area
	var nRealColSize, nRealRowSize;
	
	// fieldposition="horizontal" 컴포넌트간 Padding
	var nPaddingHH = this.H_COMP_PADDING_RIGHT + this.H_COMP_PADDING_LEFT;			// 라벨없이 컴포넌트끼리 가로 간격
	var nPaddingHV = this.H_COMP_PADDING_BOTTOM + this.H_COMP_PADDING_TOP;			// 라벨없이 컴포넌트끼리 세로 간격 
	
	// fieldposition="vertical" 컴포넌트간 Padding
	var nPaddingVH = this.V_COMP_PADDING_RIGHT + this.V_COMP_PADDING_LEFT;			// 라벨없이 컴포넌트끼리 가로 간격
	var nPaddingVV = this.V_COMP_PADDING_BOTTOM + this.V_COMP_PADDING_TOP;			// 라벨없이 컴포넌트끼리 세로 간격 
	
	var nPaddingH, nPaddingV;

	//Check Quantity with Field List connected to Cell
	var nFieldInCellCnt = arrFieldInCellList.length;

	//If the Component Production Direction is Horizontal
	//Choose Array, as the x-coordinate for each row is different
	//Choose Number, as the y-coordinate for each column is identical
	if(sDirection=="horizontal")
	{
		var arrAlignX = [];
		var nAlignY;
	}
	//If the Component Production Direction is Vertical
	//Choose Number, as the x-coordinate for each row is identical
	//Choose Array, as the y-coordinate for each column is different
	else
	{
		var nAlignX;
		var arrAlignY = [];
	}

	for(var j=0;j<nFieldInCellCnt;j++)
	{
		//Import Field Information registered on the Model based on the Fields connected to the Cell
		sFieldId =  arrFieldInCellList[j];
		oField = arrFieldList.filter(arrFieldList=>arrFieldList.id==sFieldId)[0];
		
		// oField가 없거나 usecomp == "false"인 경우 포지션 정보 없음
		if (this.lfn_IsNull(oField) || oField.usecomp == "false") {
			arrFieldPosition[j] = { "fieldid" : sFieldId};
			continue;
		}
		
		sFieldPosition = oField.fieldposition;

		//Import Label Width Information set on the first Field
		//라벨을 첫번째 Field 기준으로 표시(라벨은 고정하고, align 기준을 Cell에서 라벨 제외한 영역에서 Field값으로 계산)
		nLabelSize = j==0 ? nexacro.toNumber(oField.labelsize) : 0;			// 첫번째 Field만 라벨있고 나머지는 없음.
		
		if (sFieldPosition=="horizontal")
		{
			// 라벨 좌측고정
			nRealColSize = nColSize - nexacro.toNumber(oField.labelsize);		// align기준사이즈 = nColSize - 라벨사이즈
			nRealRowSize = nRowSize;											// align기준사이즈 = nRowSize
			
			//Evaluate Width/Height that this field will be expressed on
			nCompWidth = this.lfn_GetRealSize(oField.compwidth, 0, nRealColSize, this.COMP_WIDTH, 0, 0);
			nCompHeight = this.lfn_GetRealSize(oField.compheight, 0, nRealRowSize, this.COMP_HEIGHT, 0, 0);
			
			nPaddingH = nPaddingHH;
			nPaddingV = nPaddingHV;
		}
		else
		{
			// 라벨 상단고정
			nRealColSize = nColSize;											// align기준사이즈 = nColSize
			nRealRowSize = nRowSize - nexacro.toNumber(oField.labelsize);		// align기준사이즈 = nRowSize - 라벨사이즈
			
			//Evaluate Width/Height that this field will be expressed on
			nCompWidth = this.lfn_GetRealSize(oField.compwidth, 0, nRealColSize, this.COMP_WIDTH, 0, 0);
			nCompHeight = this.lfn_GetRealSize(oField.compheight, 0, nRealRowSize, this.COMP_HEIGHT, 0, 0);
			
			nPaddingH = nPaddingVH;
			nPaddingV = nPaddingVV;
		}
		
		//If the Component Production Direction is Horizontal
		if(sDirection=="horizontal")
		{
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
			if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx+1, nPaddingH, this.MERGE_LABEL_COMP_SPACE, true);
			else nTemp = 0;
			
			//Start a new line if the Field exceeds the Cell Height
			if(nLeft+nCompWidth-nTemp>nRealColSize)
			{
				//The Right value of the last Field of this Row
				nEndX = nLeft;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx, nPaddingH, this.MERGE_LABEL_COMP_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this Row
				arrAlignX[nRowIdx] = this.lfn_CalcAlignPos(sHAlign, nRealColSize, (nEndX - nStartX - nTemp));

				//Create the starting Left/Top Coordinates of the next Row
				//Set the Bottom value of the Field with the largest Height of this Row as the Top value of the next Row
				nTop += nFiledHeightMax;

				//Initialize the Left Coordinate
				nLeft = 0;

				//Initialize the largest Height Value
				nFiledHeightMax = 0;

				//Initialize the Col Index
				nColIdx = 0;

				//Increase Row Index
				nRowIdx++;
			}

			//Evaluate the largest Height Value
			if(nCompHeight>nFiledHeightMax)nFiledHeightMax = nCompHeight;
		}
		//If the Component Production Direction is Vertical
		else
		{
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
			if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx+1, nPaddingV, this.MERGE_LABEL_LINE_SPACE, true);
			else nTemp = 0;
			
			//this.lfn_Log("nTop : " + nTop + " / nCompHeight : " + nCompHeight + " / nTemp : " + nTemp + " / nRealRowSize : " + nRealRowSize);
			//Start a new line if the Field exceeds the Cell Height
			if(nTop+nCompHeight-nTemp>nRealRowSize)
			{
				//The Bottom Value of the last Field of this Row
				nEndY = nTop;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx, nPaddingV, this.MERGE_LABEL_LINE_SPACE, true);
				else nTemp = 0;

				//Evaluate the VAlign Starting Location Value of this Row
				arrAlignY[nRowIdx] = this.lfn_CalcAlignPos(sVAlign, nRealRowSize, ( nEndY - nStartY - nTemp));

				//Create the starting Left/Top Coordinates of the next Row
				//Set the right value of the field with the largest width of this row as the left value of the next Row
				nLeft += nFiledWidthMax;

				//Initialize Top Coordinate
				nTop  = 0;

				//Initialize the largest Width Value
				nFiledWidthMax = 0;

				//Initialize the Col Index
				nColIdx = 0;

				//Increase Row Index
				nRowIdx++;
			}

			//Evaluate the largest Width Value
			if(nCompWidth>nFiledWidthMax)nFiledWidthMax = nCompWidth;
		}

		//Starting Left/Top Location Value of the Field
		if(j==0)
		{
			nStartX = nLeft;
			nStartY = nTop;
		}

		//If is it the last Field
		if(j==nFieldInCellCnt-1)
		{
			//If the Component Production Direction is Horizontal
			if(sDirection=="horizontal")
			{
				//The Right value of the last Field of this Row
				nEndX = nLeft + nCompWidth;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx+1, nPaddingH, this.MERGE_LABEL_COMP_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this Row
				arrAlignX[nRowIdx] = this.lfn_CalcAlignPos(sHAlign, nRealColSize, (nEndX - nStartX - nTemp));
				
				//The Bottom Value of the Field with the largest Height until the last Field
				nEndY = nTop + nFiledHeightMax;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nRowIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nRowIdx+1, nPaddingV, this.MERGE_LABEL_LINE_SPACE, true);
				else nTemp = 0;
				
				//Evaluate the VAlign Starting Location Value
				nAlignY = this.lfn_CalcAlignPos(sVAlign, nRealRowSize, (nEndY - nStartY - nTemp));
			}
			//If the Component Production Direction is Vertical
			else
			{
				//The Bottom Value of the last Field of this Row
				nEndY = nTop + nCompHeight;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx+1, nPaddingV, this.MERGE_LABEL_LINE_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this Row
				arrAlignY[nRowIdx] = this.lfn_CalcAlignPos(sVAlign, nRealRowSize, (nEndY - nStartY - nTemp));

				//The Right Value of the Field with the largest Height until the last Field
				nEndX = nLeft + nCompWidth;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nRowIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nRowIdx+1, nPaddingH, this.MERGE_LABEL_COMP_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value
				nAlignX = this.lfn_CalcAlignPos(sHAlign, nRealColSize, (nEndX - nStartX - nTemp));

			}
		}

		//Save the Field Location Information
		arrFieldPosition[j] =
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"width" : nCompWidth,
			"height" : nCompHeight,
			"rowidx" : nRowIdx,
			"colidx" : nColIdx,
			"alignx" : 0,
			"aligny" : 0,
			"colsize" : nColSize,
			"rowsize" : nRowSize
		};
		
		//Set the Left/Top Location Value of the next Field
		if(sDirection=="horizontal")nLeft += nCompWidth;
		else nTop += nCompHeight;

		//Increase Col Index
		nColIdx++;
	}

	//Save Align X/Y Value on the Field Location Information
	if(sDirection=="horizontal")
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = arrAlignX[nRowIdx];
			arrFieldPosition[i].aligny = nAlignY;
		}
	}else
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = nAlignX;
			arrFieldPosition[i].aligny = arrAlignY[nRowIdx];
		}
	}
	
	//Return Field Location Information
	return arrFieldPosition;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcField
 * Parameter    :
				- sDirection : Component Production Direction
				- sVAlign : Component Vertical Alignment Method(top|middle|bottom)
				- sHAlign : Component Horizontal Alignment Method(left|center|right)
				- nColSize : The Width of The Cell to be Expressed
				- nRowSize : The Height of The Cell to be Expressed
				- arrFieldInCellList : Field List added on the Cell
 * Return       : arrFieldPosition : Object Array with Field Location Information
 * Description  : Function to Evaluate the Field Location Value to be Expressed
 *---------------------------------------------------------------------------------------------*/
fn_CalcField = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize, arrFieldInCellList)
{
	var nLeft = 0;
	var nTop  = 0;
	var nRowIdx = 0;
	var nColIdx = 0;
	var nFiledWidthMax = 0;
	var nFiledHeightMax = 0;

	var nStartX, nStartY;
	var nEndX, nEndX;
	var nTemp;
	
	//Import Field List Registered to the Model
	var arrFieldList = this.oUseFieldArray.fields;
	
	//Number of Fields connected to the Cell
	var nFieldInCellCnt;

	//Object Array to save the Field Location Information
	var arrFieldPosition = [];

	var sFieldPosition;
	var nFieldAreaWidth, nFieldAreaHeight;
	
	//Label Width
	var nLabelSize;
	
	var nPaddingH, nPaddingV;													// 필드끼리 가로 간격, 세로간격
	
	//Check Quantity with Field List connected to Cell
	var nFieldInCellCnt = this.lfn_IsNull(arrFieldInCellList) ? arrFieldList.length : arrFieldInCellList.length;

	//If the Component Production Direction is Horizontal
	//Choose Array, as the x-coordinate for each row is different
	//Choose Number, as the y-coordinate for each column is identical
	if(sDirection=="horizontal")
	{
		var arrAlignX = [];
		var nAlignY;
	}
	//If the Component Production Direction is Vertical
	//Choose Number, as the x-coordinate for each row is identical
	//Choose Array, as the y-coordinate for each column is different
	else
	{
		var nAlignX;
		var arrAlignY = [];
	}

	for(var j=0;j<nFieldInCellCnt;j++)
	{
		//If Layout was used
		//Import Field Information registered on the Model based on the Fields connected to the Cell
		if (!this.lfn_IsNull(arrFieldInCellList))			// layout
		{
			sFieldId =  arrFieldInCellList[j];
			oField = arrFieldList.filter(arrFieldList=>arrFieldList.id==sFieldId)[0];
		}
		//If Layout was not used
		//Import Field Information registered on the Model
		else												
		{
			oField = arrFieldList[j];
			sFieldId = oField.id;
		}
		
		// oField가 없거나 usecomp == "false"인 경우 포지션 정보 없음
		if (this.lfn_IsNull(oField) || oField.usecomp == "false") {
			arrFieldPosition[j] = { "fieldid" : sFieldId};
			continue;
		}
		
		// label위치
		sFieldPosition = oField.fieldposition;

		//Import Label Width Information set on the current Field
		nLabelSize = nexacro.toNumber(oField.labelsize);
		
		if (sFieldPosition=="horizontal")
		{
			//Evaluate Width/Height that this field will be expressed on
			nCompWidth = this.lfn_GetRealSize(oField.compwidth, nLabelSize, nColSize, this.COMP_WIDTH, 0, 0);
			nCompHeight = this.lfn_GetRealSize(oField.compheight, 0, nRowSize, this.COMP_HEIGHT, 0, 0);
			
			nFieldAreaWidth = nCompWidth + nLabelSize;
			nFieldAreaHeight = nCompHeight;
			
			nPaddingH = this.H_COMP_PADDING_RIGHT;
			nPaddingV = this.H_COMP_PADDING_BOTTOM;
		}
		else
		{
			//Evaluate Width/Height that this field will be expressed on
			nCompWidth = this.lfn_GetRealSize(oField.compwidth, 0, nColSize, this.COMP_WIDTH, 0, 0);
			nCompHeight = this.lfn_GetRealSize(oField.compheight, nLabelSize, nRowSize, this.COMP_HEIGHT, 0, 0);
			
			nFieldAreaWidth = nCompWidth;
			nFieldAreaHeight = nCompHeight + nLabelSize;
			
			nPaddingH = this.V_COMP_PADDING_RIGHT;
			nPaddingV = this.V_COMP_PADDING_BOTTOM;
		}
		
		//If the Component Production Direction is Horizontal
		if(sDirection=="horizontal")
		{
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
			if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx+1, nPaddingH, this.COMP_SPACE, true);
			else nTemp = 0;
			
			//Start a new line if the Field exceeds the Cell Height
			if(nLeft+nFieldAreaWidth-nTemp>nColSize)
			{
				//The Right value of the last Field of this Row
				nEndX = nLeft;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx, nPaddingH, this.COMP_SPACE, true);
				else nTemp = 0;
				
				//this.lfn_Log("nEndX : " + nEndX + " / nStartX : " + nStartX + " / nTemp : " + nTemp);

				//Evaluate the HAlign Starting Value of this Row
				arrAlignX[nRowIdx] = this.lfn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));

				//Create the starting Left/Top Coordinates of the next Row
				//Set the Bottom value of the Field with the largest Height of this Row as the Top value of the next Row
				nTop += nFiledHeightMax;

				//Initialize the Left Coordinate
				nLeft = 0;

				//Initialize the largest Height Value
				nFiledHeightMax = 0;

				//Initialize the Col Index
				nColIdx = 0;

				//Increase Row Index
				nRowIdx++;
			}

			//Evaluate the largest Height Value
			if(nFieldAreaHeight>nFiledHeightMax)nFiledHeightMax = nFieldAreaHeight;
		}
		//If the Component Production Direction is Vertical
		else
		{
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space								
			if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx+1, nPaddingH, this.COMP_SPACE, true);								
			else nTemp = 0;
			
			//Start a new line if the Field exceeds the Cell Height
			if(nTop+nFieldAreaHeight-nTemp>nRowSize)
			{
				//The Bottom Value of the last Field of this Row
				nEndY = nTop;
				
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx, nPaddingH, this.COMP_SPACE, true);
				else nTemp = 0;
				
				//this.lfn_Log("nRowSize : " + nRowSize + " / nEndY : " + nEndY+ " / nStartY : " + nStartY+ " / nTemp : " + nTemp);

				//Evaluate the VAlign Starting Location Value of this Row
				arrAlignY[nRowIdx] = this.lfn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));

				//Create the starting Left/Top Coordinates of the next Row
				//Set the right value of the field with the largest width of this row as the left value of the next Row
				nLeft += nFiledWidthMax;

				//Initialize Top Coordinate
				nTop  = 0;

				//Initialize the largest Width Value
				nFiledWidthMax = 0;

				//Initialize the Col Index
				nColIdx = 0;

				//Increase Row Index
				nRowIdx++;
			}

			//Evaluate the largest Width Value
			if(nFieldAreaWidth>nFiledWidthMax)nFiledWidthMax = nFieldAreaWidth;
		}

		//Starting Left/Top Location Value of the Field
		if(j==0)
		{
			nStartX = nLeft;
			nStartY = nTop;
		}

		//If is it the last Field
		if(j==nFieldInCellCnt-1)
		{
			//If the Component Production Direction is Horizontal
			if(sDirection=="horizontal")
			{
				//The Right value of the last Field of this Row
				nEndX = nLeft + nFieldAreaWidth;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx+1, nPaddingH, this.COMP_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this Row
				arrAlignX[nRowIdx] = this.lfn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));

				//The Bottom Value of the Field with the largest Height until the last Field
				nEndY = nTop + nFiledHeightMax;
				
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nRowIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nRowIdx, nPaddingV, this.LINE_SPACE, false);
				else nTemp = 0;

				//Evaluate the VAlign Starting Location Value
				nAlignY = this.lfn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));
			}
			//If the Component Production Direction is Vertical
			else
			{
				//The Bottom Value of the last Field of this Row
				nEndY = nTop + nFieldAreaHeight;
				
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nColIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nColIdx+1, nPaddingH, this.COMP_SPACE, true);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value of this Row
				arrAlignY[nRowIdx] = this.lfn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));

				//The Right Value of the Field with the largest Height until the last Field
				nEndX = nLeft + nFieldAreaWidth;

				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space
				if(nRowIdx!=0)nTemp = this.lfn_CalcPaddingToSpace(nRowIdx, nPaddingV, this.LINE_SPACE, false);
				else nTemp = 0;

				//Evaluate the HAlign Starting Value
				nAlignX = this.lfn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));
			}
		}

		//Save the Field Location Information
		arrFieldPosition[j] =
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"width" : nCompWidth,
			"height" : nCompHeight,
			"rowidx" : nRowIdx,
			"colidx" : nColIdx,
			"alignx" : 0,
			"aligny" : 0,
			"colsize": nColSize,
			"rowsize" : nRowSize
		};

		//Set the Left/Top Location Value of the next Field
		if(sDirection=="horizontal")nLeft += nFieldAreaWidth;
		else nTop += nFieldAreaHeight;

		//Increase Col Index
		nColIdx++;
	}

	//Save Align X/Y Value on the Field Location Information
	if(sDirection=="horizontal")
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = arrAlignX[nRowIdx];
			arrFieldPosition[i].aligny = nAlignY;
		}
	}else
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = nAlignX;
			arrFieldPosition[i].aligny = arrAlignY[nRowIdx];
		}
	}
	
	//Return Field Location Information
	return arrFieldPosition;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeCompByLayout
 * Parameter    :
				- oLayout : Layout Setting Information
 * Return       :
 * Description  : Layout-based Component Production Function
 *---------------------------------------------------------------------------------------------*/
fn_MakeCompByLayout = function(oLayout)
{
	//CellList Information set on Layout
	var arrCellList = oLayout.celllist;

	//ColumnSize Information set on Layout
	var arrColSize = oLayout.columnsize;

	//RowSize Information set on Layout
	var arrRowSize = oLayout.rowsize;

	//Import Column/Row Default Size
	var nColSizeDef = oLayout.colsizedef;
	var nRowSizeDef = oLayout.rowsizedef;

	var nCol, nRow, nColSpan, nRowSpan;
	var sDirection, sVAlign, sHAlign;
	var nWidth;
	var nHeight;
	var bMergeLabel;
	var bUseFormatSize;

	var oCell;
	var oStatic;

	for(var i=0;i<arrCellList.length;i++)
	{
		oCell = arrCellList[i];
		sDirection = oCell.direction
		nCol = nexacro.toNumber(oCell.col);
		nRow = nexacro.toNumber(oCell.row);
		nColSpan = nexacro.toNumber(oCell.colspan);
		nRowSpan = nexacro.toNumber(oCell.rowspan);
		bMergeLabel = oCell.mergelabel;
		bUseFormatSize = oCell.useformatsize;

		//Initialize to 1 if there are no Col/RowSpan Values
		if(!nColSpan)nColSpan = 1;
		if(!nRowSpan)nRowSpan = 1;

		//Continue if there are no Fields on the Cell
		if(!oCell.fieldlist)continue;

		//Import the Left/Top Location Value of the current Cell
// 		nLeft = this.lfn_GetCellSize(arrColSize, 0, nCol, nColSizeDef) + this.VIEW_PADDING_LEFT;
// 		nTop = this.lfn_GetCellSize(arrRowSize, 0, nRow, nColSizeDef) + this.VIEW_PADDING_TOP;
		nLeft = this.lfn_GetCellSize(arrColSize, 0, nCol, nColSizeDef);
		nTop = this.lfn_GetCellSize(arrRowSize, 0, nRow, nColSizeDef);

		fn_MakeCompPanel(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition, true, nCol, nRow, bMergeLabel, bUseFormatSize);
	}
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeCompPanel
 * Parameter    :
				- nBaseLeft : Reference Coordinate (Left) to create Component
				- nBaseTop : Reference Coordinate (Top) to create Component
				- nBaseWidth : Reference Coordinate (Width) to create Component
				- nBaseHeight : Reference Coordinate (Height) to create Component
				- sDirection : Component Production Direction
				- arrFieldPosition: Object Array with Field Location Information
				- bFormat : 레이아웃인지 사용여부
				- bMergeLabel : 레이아웃에서 mergelabel 사용 여부
				- nLayoutCol : 레이아웃 기준 현재 Col Index
                - nLayoutRow : 레이아웃 기준 현재 Row Index
 * Return       :
 * Description  : Component Tag Production Function
 *---------------------------------------------------------------------------------------------*/
fn_MakeCompPanel = function(nBaseLeft, nBaseTop, nBaseWidth, nBaseHeight, sDirection, arrFieldPosition, bFormat, nLayoutCol, nLayoutRow, bMergeLabel, bUseFormatSize)
{
	var nLabelLeft, nLabelTop, nLabelWidth, nLabelHeight;
	var nCompLeft, nCompTop, nCompWidth, nCompHeight, nCompBgWidth;
	var nPosLeft, nPosTop, nPosWidth, nPosHeight;
	var nColSize, nRowSize;
	var nFieldAreaWidth, nFieldAreaHeight;
	var nPaddingLeft, nPaddingTop, nPaddingRight, nPaddingBottom;
	
	var oAlignPos;
	var sFieldId;
	var oField;
	var oFieldPosition;
	var nRowIdx, nColIdx;
	var nAlignX, nAlignY;
	var nCompAlignX, nCompAlignY;
	var nCheckIdx;

	var oModel = this.oContents.View.Model;
	var sCompId;
	var sCompClassId;
	var oCompClass;
	var oLabelClass			= this.lfn_GetCompClass(this.LABEL_TYPE);
	var oCompBgClass		= this.lfn_GetCompClass(this.COMP_BG_TYPE);
	var sCompCssClass;
	var sLabelCssClass;
	var sFieldBgCssClass = this.COMP_BG_CSSCLASS;
	var sFieldPosition;
	var nHorizontalGap, nVerticalGap;
	
	var oPanelClass = this.lfn_GetCompClass("panel");
	var oLayoutRoot = this.oLayoutRoot;
	var arrPanelItem = new Array();
	var oLayoutPanel;
	var oFieldPanel;
	var arrFieldPanelItem = new Array();
	var oCompPanel;
	var sCompPanelId;
	var arrCompPanelItem = new Array();
	var bMakeFieldPanel = true;
	
	// FieldBox 사용여부
	var sUseFieldBox = this.oGenerationAttr.attributes.usefieldbox;
	
	var nLayoutWidth = nBaseWidth;
	var nLayoutHeight = nBaseHeight;
	
	if(this.lfn_IsNull(bFormat))		bFormat = false;
	if(this.lfn_IsNull(bMergeLabel))	bMergeLabel = "false";
	if(this.lfn_IsNull(bUseFormatSize))	bUseFormatSize = "true";
	if(this.lfn_IsNull(nLayoutCol))		nLayoutCol = 0;
	if(this.lfn_IsNull(nLayoutRow))		nLayoutRow = 0;
	
	// format설정시 bMergeLabel이 false인 경우 Panel생성 후 필드 Panel들 연결
	if (bFormat && bMergeLabel == "false" && arrFieldPosition.length > 1)
	{
		sCompId = this.lfn_GetCompId(oPanelClass.prefix + "_" + "LAYOUT" + "_" + nLayoutCol+ "_" + nLayoutRow);

		oLayoutPanel = {
						"tag" : oPanelClass.classId,
						"attribute" :
						{
							"id" : sCompId, "left" : nBaseLeft, "top" : nBaseTop, "width" : nLayoutWidth, "height" : nLayoutHeight
							, "type" : "horizontal", "horizontalgap" : this.COMP_SPACE, "verticalgap" : this.LINE_SPACE
						}
					};
					
		//if (bUseFormatSize == "true")	oLayoutPanel.attribute["fittocontents"] = "both";
		
		// Panel 컴포넌트 추가
		oModel[oModel.length] ={ "fieldid" : this.VIEW_COMP_FIELD_ID, "Components" : [oLayoutPanel]};
		this.lfn_GetPanelContents(this.oLayoutRoot, [sCompId]);
		
		// 컴포넌트는 내부 Table Panel 기준으로 생성되기 위해 변수 설정
		oLayoutRoot = oLayoutPanel;
	}
	
	for(var i=0;i<arrFieldPosition.length;i++)
	{
		//Import Field Object
		oFieldPosition = arrFieldPosition[i];
		sFieldId = oFieldPosition.fieldid;
		oField = this.oUseFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
		
		if (this.lfn_IsNull(oField))	continue;

		//Import Component Naming Rules
		oCompClass = this.lfn_GetCompClass(oField.comptype, oField);

		//Import Component Css Class Id Value
		sCompCssClass = this.lfn_GetCssClass(oField, "cssclass", this.COMP_CSSCLASS, this.COMP_REQUIRED_CSSCLASS);

		//Import Label Css Class Id Value
		sLabelCssClass = this.lfn_GetCssClass(oField, "labelcssclass", this.LABEL_CSSCLASS, this.LABEL_REQUIRED_CSSCLASS);
		
		sFieldPosition = oField.fieldposition;

		//Import Row/Col Index where the Field will be located
		nRowIdx = oFieldPosition.rowidx;
		nColIdx = oFieldPosition.colidx;

		nRowSize = oFieldPosition.rowsize;
		nColSize = oFieldPosition.colsize;

		//Import Align Location Information of the Field
		nAlignX = oFieldPosition.alignx;
		nAlignY = oFieldPosition.aligny;

		//Import Field Location Information
		nPosLeft = nexacro.toNumber(oFieldPosition.left);
		nPosTop = nexacro.toNumber(oFieldPosition.top);
		nPosWidth = nexacro.toNumber(oFieldPosition.width);
		nPosHeight = nexacro.toNumber(oFieldPosition.height);
		
		// fieldposition에 따라 Padding값 설정
		if (sFieldPosition=="vertical")
		{
			nPaddingLeft	= this.V_COMP_PADDING_LEFT;
			nPaddingTop		= this.V_COMP_PADDING_TOP;
			nPaddingRight	= this.V_COMP_PADDING_RIGHT;
			nPaddingBottom	= this.V_COMP_PADDING_BOTTOM;
		}
		else
		{
			nPaddingLeft	= this.H_COMP_PADDING_LEFT;
			nPaddingTop		= this.H_COMP_PADDING_TOP;
			nPaddingRight	= this.H_COMP_PADDING_RIGHT;
			nPaddingBottom	= this.H_COMP_PADDING_BOTTOM
		}
		
		nHorizontalGap = nPaddingLeft + nPaddingRight;
		nVerticalGap = nPaddingTop + nPaddingBottom;
		
		//다중 field 설정 시 label 통합
		if (bMergeLabel=="true")
		{
			//Label과 Comp를 상하배치
			if (sFieldPosition=="vertical")
			{
				if(i==0)
				{
					nLabelLeft = nBaseLeft + nPosLeft;
					nLabelTop = nBaseTop + nPosTop;
					nLabelWidth = nexacro.toNumber(nBaseWidth);
					nLabelHeight = nexacro.toNumber(oField.labelsize);
				}

				//Component Left Coordinate = Cell Left + Field Left + Label Area Width + HAlign Starting Coordinate
				nCompLeft = nBaseLeft + nPosLeft + nAlignX;

				//Component Top Coordinate = Cell Top + Field Top + VAlign Starting Coordinate
				nCompTop = nBaseTop + nPosTop + nAlignY + nLabelHeight;
				
				//Component Width = Field Width - Left/Right Padding
				nCompWidth = nPosWidth - nPaddingLeft - nPaddingRight;

				//Component Height = Field Height - Top/Bottom Padding
				nCompHeight = nPosHeight - nPaddingTop - nPaddingBottom;
			}
			//Label과 Comp를 좌우배치
			else
			{
				if(i==0)
				{
					nLabelLeft = nBaseLeft + nPosLeft;
					nLabelTop = nBaseTop + nPosTop;
					nLabelWidth = nexacro.toNumber(oField.labelsize);
					nLabelHeight = nexacro.toNumber(nBaseHeight);
				}

				//Component Left Coordinate = Cell Left + Field Left + Label Area Width + HAlign Starting Coordinate
				nCompLeft = nBaseLeft + nPosLeft + nLabelWidth + nAlignX;

				//Component Top Coordinate = Cell Top + Field Top + VAlign Starting Coordinate
				nCompTop = nBaseTop + nPosTop + nAlignY;

				//Component Width = Field Width - Left/Right Padding
				nCompWidth = nPosWidth - nPaddingLeft - nPaddingRight;

				//Component Height = Field Height - Top/Bottom Padding
				nCompHeight = nPosHeight - nPaddingTop - nPaddingBottom;
			}
			
			if(sDirection=="horizontal")
			{
				if(nColIdx!=0)
				{
					//Component Left Coordinate = Component Left Coordinate - (Padding Value excluding the Left Padding of the first Component) + (Comp Space*Number of Components)
					nCompLeft = nCompLeft - (nPaddingLeft*(nColIdx-1)) - (nPaddingRight*nColIdx) + (this.MERGE_LABEL_COMP_SPACE *nColIdx);
				}else
				{
					//Component Left Coordinate = Component Left Coordinate + Component Left Padding
					nCompLeft = nCompLeft + nPaddingLeft;
				}

				if(nRowIdx!=0)
				{
					//Component Top Coordinate = Component Top Coordinate - (Padding Value excluding the Top Padding of the first Component) + (Line Space*Number of Components)
					nCompTop = nCompTop - (nPaddingTop*(nRowIdx-1)) - (nPaddingBottom*nRowIdx) + (this.MERGE_LABEL_LINE_SPACE *nRowIdx);
				}else
				{
					//Component Top Coordinate = Component Top Coordinate + Component Top Padding
					nCompTop = nCompTop + nPaddingTop;
				}
			}
			else
			{
				if(nRowIdx!=0)
				{
					//Component Left Coordinate = Component Left Coordinate - (Padding Value excluding the Left Padding of the first Component) + (Comp Space*Number of Components)
					nCompLeft = nCompLeft - (nPaddingLeft*(nRowIdx-1)) - (nPaddingRight*nRowIdx) + (this.MERGE_LABEL_COMP_SPACE *nRowIdx);

				}else
				{
					//Component Left Coordinate = Component Left Coordinate + Component Left Padding
					nCompLeft = nCompLeft + nPaddingLeft;
				}

				if(nColIdx!=0)
				{
					//Component Top Coordinate = Component Top Coordinate - (Padding Value excluding the Top Padding of the first Component) + (Line Space*Number of Components)
					nCompTop = nCompTop - (nPaddingTop*(nColIdx-1)) - (nPaddingBottom*nColIdx) + (this.MERGE_LABEL_LINE_SPACE *nColIdx);
				}else
				{
					//Component Top Coordinate = Component Top Coordinate + Component Top Padding
					nCompTop = nCompTop + nPaddingTop;
				}
			}
			
			if (sFieldPosition=="vertical")
			{
				nFieldAreaWidth = nPosWidth;
				nFieldAreaHeight = nLabelHeight + nPosHeight;
			}
			else
			{
				nFieldAreaWidth = nLabelWidth + nPosWidth;
				nFieldAreaHeight = nPosHeight;
			}
		}
		// Label + Comp 배치
		else
		{
			//Label과 Comp를 상하배치
			if (sFieldPosition=="vertical")
			{
				nLabelLeft = nBaseLeft + nPosLeft + nAlignX;
				nLabelTop = nBaseTop + nPosTop + nAlignY;
				nLabelWidth = nPosWidth;
				nLabelHeight = nexacro.toNumber(oField.labelsize);
				
				if(sDirection=="horizontal")
				{
					if(nColIdx!=0)
					{
						nLabelLeft = nLabelLeft - (nPaddingRight*(nColIdx)) + (this.COMP_SPACE *nColIdx);
					}
					
					if(nRowIdx!=0)
					{
						//Label Top Coordinate = Label Top Coordinate + (Line Space*Number of Components)
						nLabelTop = nLabelTop + (this.LINE_SPACE *nRowIdx);
					}
				}else
				{
					if(nRowIdx!=0)
					{
						nLabelLeft = nLabelLeft - (nPaddingRight*(nRowIdx)) + (this.COMP_SPACE *nRowIdx);
					}
					
					if(nColIdx!=0)
					{
						//Label Top Coordinate = Label Top Coordinate + (Line Space*Number of Components)
						nLabelTop = nLabelTop + (this.LINE_SPACE *nColIdx);
					}
				}
				
				nCompLeft = nLabelLeft + nPaddingLeft;
				nCompTop = nLabelTop + nLabelHeight + nPaddingTop;
				nCompWidth = nPosWidth - nPaddingLeft - nPaddingRight;
				nCompHeight = nPosHeight - nPaddingTop - nPaddingBottom;
				
				nFieldAreaWidth = nPosWidth;
				nFieldAreaHeight = nLabelHeight + nPosHeight;
			}
			//Label과 Comp를 좌우배치
			else
			{
				//Calculate the Left/Top Coordinate where the Component will be located
				//Evaluate actual Component Location Information reflecting Align, Padding, Comp/Line Space, etc.
				//Label Left Coordinate = Cell Left + Field Left + HAlign Starting Coordinate
				nLabelLeft = nBaseLeft + nPosLeft + nAlignX;

				//Label Top Coordinate = Cell Top + Field Top + VAlign Starting Coordinate
				nLabelTop = nBaseTop + nPosTop + nAlignY;

				//Label Width = Label Area Width
				nLabelWidth = nexacro.toNumber(oField.labelsize);

				//Label Height = Field Height
				nLabelHeight =  nPosHeight;

				if(sDirection=="horizontal")
				{
					if(nColIdx!=0)
					{
						nLabelLeft = nLabelLeft - (nPaddingRight*(nColIdx)) + (this.COMP_SPACE *nColIdx);
					}
					
					if(nRowIdx!=0)
					{
						//Label Top Coordinate = Label Top Coordinate + (Line Space*Number of Components)
						nLabelTop = nLabelTop + (this.LINE_SPACE *nRowIdx);
					}
				}else
				{
					if(nRowIdx!=0)
					{
						nLabelLeft = nLabelLeft - (nPaddingRight*(nRowIdx)) + (this.COMP_SPACE *nRowIdx);
					}
					
					if(nColIdx!=0)
					{
						//Label Top Coordinate = Label Top Coordinate + (Line Space*Number of Components)
						nLabelTop = nLabelTop + (this.LINE_SPACE *nColIdx);
					}
				}

				nCompLeft = nLabelLeft + nLabelWidth + nPaddingLeft;
				nCompTop = nLabelTop + nPaddingTop;
				nCompWidth = nPosWidth - nPaddingLeft - nPaddingRight;
				nCompHeight = nPosHeight - nPaddingTop - nPaddingBottom;
				
				nFieldAreaWidth = nLabelWidth + nPosWidth;
				nFieldAreaHeight = nPosHeight;
			}
		}
		
		// Model값 초기화
		oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};
		arrFieldPanelItem = new Array();
		
		//bMergeLabel이 false인 경우 Fieldbox, label 생성, bMergeLabel이 true인 경우 첫번째 Field 경우에만 생성
		if (bMergeLabel=="false" || i==0)
		{
			//라벨 Static 추가
			if(nLabelWidth>0)
			{
				sCompId = this.lfn_GetCompId(oLabelClass.prefix + "_" + sFieldId + "_" + "Label");
				oComp = {
							"tag" : oLabelClass.classId,
							"attribute" :
							{
								"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nLabelWidth, "height" : nLabelHeight
								, "text" : oField.label, "cssclass" : sLabelCssClass
							}
						};
				oModel[oModel.length-1].Components.push(oComp);
				arrFieldPanelItem.push(sCompId);
			}
		}

		//Add Component Tag
		sCompId = this.lfn_GetCompId(oCompClass.prefix + "_" + sFieldId);
		sCompClassId = oCompClass.classId;
		oComp = {
					"tag" : sCompClassId,
					"attribute" :
					{
						"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight
						, "cssclass" : sCompCssClass
					}
				};
		
		// 컴포넌트별 기본 속성 설정
		if (!this.lfn_IsNull(oCompClass.attribute))		Object.assign(oComp.attribute, oCompClass.attribute);
		
		//If the Component Type is Button,Checkbox,Static, add label text to the text properties
		if(sCompClassId=="Button" || sCompClassId=="CheckBox" || sCompClassId=="Static")
		{
			oComp.attribute.text = oField.label;
		}
		
		// Readonly 처리
		if(oField.compreadonly == "true")
		{
			// 조회모드(readonly처리, 스핀버튼,드롭다운버튼 안보이게 처리)
			if(sCompClassId=="Calendar" || sCompClassId=="CheckBox" || sCompClassId=="Combo" || sCompClassId=="Edit"
				|| sCompClassId=="MaskEdit" || sCompClassId=="Radio" || sCompClassId=="Spin" || sCompClassId=="TextArea"
				|| sCompClassId=="TextField" || sCompClassId=="MultiLineTextField")
			{
				oComp.attribute.readonly = "true";
				
				// reaonly시 라벨처럼 보이게 처리 여부
				if (this.COMP_READONLY_LABEL_STYLE == "true")
				{
					if (this.lfn_IsNull(sCompCssClass) || sCompCssClass == this.COMP_REQUIRED_CSSCLASS) {
						oComp.attribute.cssclass = this.COMP_READONLY_CSSCLASS;
					}
					
					// 스핀버튼, 드롭다운버튼 안보이게 처리
					if (sCompClassId=="Spin" || sCompClassId=="Combo" || sCompClassId=="Calendar")
					{
						oComp.attribute.buttonsize = "0";
					}
				}
			}
		}
		
		if(sCompClassId!="Button")
		{
			//In order to process the Bind, add Id, Field Id to BindItems Array
			this.arrBindItems[this.arrBindItems.length] = {"compid" : sCompId, "fieldid" : sFieldId, "comptype" : oField.comptype, "compclassid" : sCompClassId};
		}
		
		oModel[oModel.length-1].Components.push(oComp);
		
		// TODO : fittocontents가 버그가 있어 임시로 계산로직 추가
		if (bFormat && arrFieldPosition.length > 1)
		{
			nLayoutWidth = nCompLeft + nCompWidth - nBaseLeft;
			nLayoutHeight = nCompTop + nCompHeight - nBaseTop;
			
			if (bMergeLabel == "false")
			{
				oLayoutPanel.attribute["width"] = Math.min(nLayoutWidth, nBaseWidth);
				oLayoutPanel.attribute["height"] = Math.min(nLayoutHeight, nBaseHeight);
			}
		}

		// format설정시 bMergeLabel이 true인 경우 연결된 필드가 2개 이상일때 FieldPanel 하위에 CompPanel 생성 후 컴포넌트 연결
		if (bFormat && bMergeLabel == "true" && arrFieldPosition.length > 1)
		{
			// oCompPanel이 없는 경우 생성
			if (oCompPanel == null)
			{
				arrCompPanelItem = new Array();
				
				// CompPanel 생성
				sCompPanelId = this.lfn_GetCompId(oPanelClass.prefix + "_" + "COMP" + "_" + nLayoutCol+ "_" + nLayoutRow);
				oCompPanel = {
								"tag" : oPanelClass.classId,
								"attribute" :
								{
									"id" : sCompPanelId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight
									, "type" : "horizontal", "flexwrap" : "wrap", "horizontalgap" : this.MERGE_LABEL_COMP_SPACE, "verticalgap" : this.MERGE_LABEL_LINE_SPACE
								}
							};
							
// 				if (bUseFormatSize == "true") {
// 					oCompPanel.attribute["fittocontents"] = "both";
// 				} else {
// 					oCompPanel.attribute["fittocontents"] = "height";
// 				}
				
				// Panel 컴포넌트 추가
				oModel[oModel.length] ={ "fieldid" : this.VIEW_COMP_FIELD_ID, "Components" : [oCompPanel]};
				
				arrFieldPanelItem.push(sCompPanelId);
			}
			else
			{
				// TODO : fittocontents가 버그가 있어 임시로 계산로직 추가
				if (sFieldPosition=="vertical")
				{
					oCompPanel.attribute["width"] = nLayoutWidth;
					oCompPanel.attribute["height"] = nLayoutHeight - nLabelHeight - nVerticalGap;
				}
				else
				{
					oCompPanel.attribute["width"] = nLayoutWidth - nLabelWidth - nHorizontalGap;
					oCompPanel.attribute["height"] = nLayoutHeight;
				}
				
				
				oFieldPanel.attribute["width"] = nLayoutWidth;
				oFieldPanel.attribute["height"] = nLayoutHeight;
				
				bMakeFieldPanel = false;
			}
			
			//this.lfn_Log("nCompLeft : " + nCompLeft + " nCompTop : " + nCompTop + " nCompWidth : " + nCompWidth + " nCompHeight : " + nCompHeight);
			//this.lfn_Log("nFieldAreaWidth : " + nFieldAreaWidth + " nFieldAreaHeight : " + nFieldAreaHeight);
			//this.lfn_Log("nLayoutWidth : " + nLayoutWidth + " nLayoutHeight : " + nLayoutHeight);
			
			arrCompPanelItem.push(sCompId);
			this.lfn_GetPanelContents(oCompPanel,arrCompPanelItem);
		}
		else
		{
			arrFieldPanelItem.push(sCompId);
		}
		
		// FieldPanel 생성(Label + Comp)
		if (bMakeFieldPanel)
		{
			sCompId = this.lfn_GetCompId(oPanelClass.prefix + "_" + sFieldId);
			oFieldPanel = {
							"tag" : oPanelClass.classId,
							"attribute" :
							{
								"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nFieldAreaWidth, "height" : nFieldAreaHeight
								, "type" : sFieldPosition, "horizontalgap" : nHorizontalGap, "verticalgap" : nVerticalGap
							}
						};
						
			//if (bUseFormatSize == "true")	oFieldPanel.attribute["fittocontents"] = "both";
			
			this.lfn_GetPanelContents(oFieldPanel, arrFieldPanelItem);
			
			oModel[oModel.length-1].Components.push(oFieldPanel);
			arrPanelItem.push(sCompId);
		}
	}
	
	// Root가 Panel인 경우 PanelItem 설정
	if (oLayoutRoot)
	{
		this.lfn_GetPanelContents(oLayoutRoot, arrPanelItem);
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function()
{

    var oInitValue = [];

    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function()
{
	//Initialize Object
	var oObjects = [];

	var oViewDataset = this.lfn_GetDataset("viewdataset", this.oFieldArray, 1);

	//Object Information Setting
	oObjects.push(oViewDataset);

	// InnerDataset 정보
	var oInner = this.lfn_GetInnerDataset(this.oUseFieldArray);

	oObjects = oObjects.concat(oInner);

	//Return Object Information
	return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetBind
 * Return       : bind contents (JSON format)
 * Description  : Function to generate <Bind> source
 *---------------------------------------------------------------------------------------------*/
fn_GetBind = function()
{
	var oBind = this.lfn_GetBindItem("viewdataset", this.arrBindItems);

    return oBind;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function()
{
    var oScript = {};
	var sScript = "";
	
	var sViewNm				= this.oContents.View.attribute.id;
	
	// 컴포넌트 공통 ViewScript 반환
	sScript = this.lfn_GetCompCommonScript(sViewNm);
	
	if (this.lfn_IsNotNull(sScript))
	{
		sScript = nexacro.replaceAll(sScript,"\t","");
		
		oScript =
		{
			"tag": "Script",
			"attribute": { "type" : "xscript5.1" },
			"value": sScript
		}
	};

    return oScript;
};]]></Script>
</ViewTemplateInfo>
